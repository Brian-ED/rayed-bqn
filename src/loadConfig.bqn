intro ← 1↓"
⇐ # This config file is evaluated as a bqn namespace.
# It was autogenerated but you may edit the config however you'd like.
# Any missing variables will be autogenerated and put at the end
# without editing anything.
# Relative paths are not allowed,
# please use `•file.At path` to make a path non-relative.
# If a setting couldn't be automatically generated then it errors.
# If you give a path that wasn't found by rayed-bqn, it errors.
# You may remove this comment.
"
nl ← @+10

confPath ← "../config.bqn"
•FChars⟜intro⍟(¬•file.Exists) confPath
conf ← ⟨⟩ •Import confPath

{𝕊:!∾⟨
  "Paths in config can't be relative, use `•file.At path` "
  "to make a path not be relative (relative paths = "
  1↓∾' '∾¨𝕩 ⋄ ')'⟩
}⍟(×≠) •file.At⊸≢¨⊸/ conf⊸•ns.Get¨ ⟨
  "raylibheaderpath"
  "rayliblibpath"
  "rayguiheaderpath"
  "rayguilibpath"
⟩ (∊/⊣) •ns.Keys conf

missing ← ⟨
  "raylibheaderpath"
  "rayliblibpath"
⟩ (¬∘∊/⊣) •ns.Keys conf

{
  e←"Unknown OS, unable to automatically generate config."
  e!∨´•platform.os⊸≡¨"linux"‿"darwin"‿"windows"
}

err ← "Incomplete autogeneration of config.bqn: "
Exists ← •file.Exists (•file.Parent confPath)⊸•file.At

newExports ← {
  "rayliblibpath": 𝕩∾{
    "windows":
      p←".\raylib\lib\raylib.dll"
      (•file.Exists ".." •file.At p)!˜err∾"Couldn't find raylib.dll file at path: "∾p
      " ⇐ •file.At "∾•Repr p
  ;
    "darwin":
      default ← "/usr/local"
      # Using •BQN because CBQN on windows doesn't have the •SH system function
      exitcode‿stdout‿· ← •SH⎊1‿⟨⟩‿@ "brew"‿"--prefix"‿"raylib"
      p ← •file.At⟜"lib/libraylib.dylib"¨"../raylib"⋈(exitcode≡0)⊑default⋈nl⊸≠⊸/stdOut
      (∨´m←•file.Exists¨ ".."⊸•file.At¨ p)!˜err∾"Couldn't find libraylib.dylib file at paths:"∾∾nl∾¨p
      " ⇐ •file.At "∾•Repr ⊑m/p
  ;
    "linux":
      p←"/usr/local/lib/libraylib.so"
      (Exists p)!˜err∾"Couldn't find libraylib.so file at path: "∾p
      " ⇐ "∾•Repr p
  }•platform.os
; "raylibheaderpath": 𝕩∾{
    "windows":
      p←".\raylib\include\raylib.h"
      (•file.Exists ".." •file.At p)!˜err∾"Couldn't find raylib.h file at path: "∾p
      " ⇐ •file.At "∾•Repr p
  ;
    "darwin":
      default ← "/usr/local"
      # Using •BQN because CBQN on windows doesn't have the •SH system function
      exitcode‿stdout‿stderr ← ⟨•path⟩ •BQN "•SH ""brew""‿""--prefix""‿""raylib"""
      p ← ∾⟜"/include/raylib.h"¨"../raylib"⋈(nl⊸≠⊸/stdOut)⍟(exitcode≡0)default
      (∨´m←Exists¨p)!˜err∾"Couldn't find file raylib.h at paths:"∾∾nl∾¨p
      " ⇐ •file.At "∾•Repr ⊑m/p
  ;
    "linux":
      p←"/usr/local/include/raylib.h"
      (Exists p)!˜err∾"Couldn't find raylib.h file at path: "∾p
      " ⇐ "∾•Repr p
  }•platform.os
;
  !"Attempted to implement non-existant config: "∾𝕩
}¨missing

confPath •FLines newExports∾˜•FLines confPath

{raylibLibPath‿raylibHeaderPath ← 𝕩}⊸⊢ •Import confPath

# TODO: waiting for CBQN v0.7 to get •SH working on windows
#•SH "curl"‿"-o"‿"temp.zip"‿"https://github.com/raysan5/raylib/releases/download/5.0/raylib-5.0_win32_mingw-w64.zip"
#•SH "Expand-Archive"‿"-Force"‿"temp.zip"‿"raylib"