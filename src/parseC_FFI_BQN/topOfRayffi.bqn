# THIS FILE HAS BEEN AUTOGENERATED

on ← 0
NestedStructToStr ⇐ {
  1≥≡𝕩?𝕩;
  IsPtr ← ("ustr"≡¯4⊸↑)∨('*'≡⊑)∨"str"≡¯3⊸↑
  (m¬⊸/𝕩)∾'{'∾'}'«∾','∾¨𝕊¨ptr⍟IsPtr⍟(⟨⟩≢≢)¨𝕩/˜m←×≡¨𝕩
}

# Makes an importer that improves the ffi function creation syntax
MakeImporter ⇐ {𝕨𝕊path: debug←𝕨⊣0
  {𝕨 funcName _𝕣 inpTypes: outType←𝕨⊣⟨⟩
    IntoStr ← NestedStructToStr
    a←'>'⊸∾⌾⊑⍟(1=≠) IntoStr¨𝕩
    HandleError ← {
      •Out "DEBUG TYPE INFO:"
      •Out •Fmt 𝕩
      •Out "END OF DEBUG TYPE INFO; BEGINING WITH FULL ERROR:"
      •term.Flush@
      𝕨•FFI𝕩
    }
    func ← path •FFI⎊HandleError ⟨ NestedStructToStr outType⋄funcName⟩∾a
    m ← str⊸≡¨a
    {𝕏⊣•term.Flush∘•Out∘funcName}⍟debug {𝕏∾⟜@}⍟(a≡⋈'>'∾str) {𝕏∾⟜@¨⌾(m⊸/)}⍟(∨´m) func
  }
}

# predefined C types
c ⇐ "i8"
bool ⇐ "i8"
i‿f‿u‿i8‿·‿u8 ⇐ ⥊"32"‿"8"∾˜⌜"ifu"
str‿uStr ⇐ '*'⊸∾¨"iu"∾¨<"8:c8"
ptr ⇐ "*:i8"

#------------------------------------------------------------------------------------
# BQN low-level function utils
#------------------------------------------------------------------------------------

# BQN Pointer functions
# neccesary for low level programming in bqn
MovePtr  ⇐ {b←256⋆↕8 ⋄ -⟜(256×≥⟜128)256|⌊b÷˜𝕨+´b×256|𝕩}     #      bytes 𝕊 pointer # Move pointer by an amount of bytes
read     ⇐ @•FFI "" ‿"bqn_readI8Arr"  ‿"𝕨>a"    ‿('>'∾ptr)  #       data 𝕊 pointer # write data to pointer
readI16  ⇐ @•FFI "" ‿"bqn_readI16Arr" ‿"𝕨>a"    ‿('>'∾ptr)  #       data 𝕊 pointer # write data to pointer
readI32  ⇐ @•FFI "" ‿"bqn_readI32Arr" ‿"𝕨>a"    ‿('>'∾ptr)  #       data 𝕊 pointer # write data to pointer
make     ⇐ @•FFI "a"‿"bqn_makeI8Vec"  ‿"𝕨>u64"  ‿('>'∾ptr)  # bytesCount 𝕊 pointer # turn data at pointer into a number array
makeI16  ⇐ @•FFI "a"‿"bqn_makeI16Vec" ‿"𝕨>u64"  ‿('>'∾ptr)  # bytesCount 𝕊 pointer # turn data at pointer into a number array
makeI32  ⇐ @•FFI "a"‿"bqn_makeI32Vec" ‿"𝕨>u64"  ‿('>'∾ptr)  #   NumCount 𝕊 pointer # turn data at pointer into a number array
makeUTF8 ⇐ @•FFI "a"‿"bqn_makeUTF8Str"‿"𝕨>u64"  ‿('>'∾ptr)  #     length 𝕊 pointer # turn string at pointer into a bqn string
strLen   ⇐ @•FFI i  ‿"strlen"         ‿('>'∾ptr)            #            𝕊 pointer # length of unicode C-string

# NumCount 𝕊 pointer # turn data at pointer into a number array
MakeF32 ⇐ (@•FFI"*:i8"‿"memcpy"‿"&f32"‿"*i8"‿"u64"){
  bytes←∘‿4⥊𝕩 Make˜ 𝕨×4
  1⊑∘⊑˘𝔽∘{⟨0⟩‿𝕩‿4}˘bytes
}

# NumCount 𝕊 pointer # turn data at pointer into a number array
U32ToI8 ⇐ ⟨@•FFI"*:i8"‿"memcpy"‿"&i32"‿"*u32"‿"u64",@•FFI"*:i8"‿"memcpy"‿"&u32"‿"*i32"‿"u64"⟩{
  𝔽_𝕣𝕩:F‿·←𝕗⋄⟨32‿'i'⋄8‿'i'⟩•bit._cast 1⊑F⟨0⟩‿⟨𝕩⟩‿4
;
  𝔽_𝕣⁼𝕩:·‿F←𝕗⋄⊑1⊑F{⟨0⟩‿𝕩‿4} ⟨8‿'i'⋄32‿'i'⟩•bit._cast 𝕩
}