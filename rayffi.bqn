#### THIS TEXT HAS BEEN AUTOGENERATED ####

# Makes an importer that improves the ffi function creation syntax
MakeImporter ‚áê {ùï®ùïäpathToBin: debug‚Üêùï®‚ä£0
  NestedStructToStr ‚Üê {
    1‚â•‚â°ùï©?ùï©;
    IsPtr ‚Üê ("ustr"‚â°¬Ø4‚ä∏‚Üë)‚à®('*'‚â°‚äë)‚à®"str"‚â°¬Ø3‚ä∏‚Üë
    (m¬¨‚ä∏/ùï©)‚àæ'{'‚àæ'}'¬´‚àæ','‚àæ¬®ùïä¬®ptr‚çüIsPtr‚çü(‚ü®‚ü©‚â¢‚â¢)¬®ùï©/Àúm‚Üê√ó‚â°¬®ùï©
  }

  {ùï® funcName _ùï£ inpTypes: outType‚Üêùï®‚ä£‚ü®‚ü©
    IntoStr ‚Üê NestedStructToStr
    a‚Üê'>'‚ä∏‚àæ‚åæ‚äë‚çü(1=‚â†) IntoStr¬®ùï©
    HandleError ‚Üê {
      ‚Ä¢Out "DEBUG TYPE INFO:"
      ‚Ä¢Out ‚Ä¢Fmt ùï©
      ‚Ä¢Out "END OF DEBUG TYPE INFO; BEGINING WITH FULL ERROR:"
      ‚Ä¢term.Flush@
      ùï®‚Ä¢FFIùï©
    }
    func ‚Üê pathToBin ‚Ä¢FFI‚éäHandleError ‚ü® NestedStructToStr outType‚ãÑfuncName‚ü©‚àæa
    m ‚Üê str‚ä∏‚â°¬®a
    ‚Ä¢term.Flush‚àò@‚àò‚Ä¢Out‚àòfuncName‚çüdebug‚ä∏‚ä¢ {ùïè‚àæ‚üú@}‚çü(a‚â°‚ãà'>'‚àæstr) {ùïè‚àæ‚üú@¬®‚åæ(m‚ä∏/)}‚çü(‚à®¬¥m) func
  }
}

# predefined C types
bool ‚áê "i8"
c    ‚áê "i8"
i    ‚áê "i32"
f    ‚áê "f32"
u    ‚áê "u32"
i8   ‚áê "i8"
u8   ‚áê "u8"
str  ‚áê "*i8:c8"
uStr ‚áê "*u8:c8"
ptr  ‚áê "*:i8"

r ‚áê MakeImporter pathToBinary ‚áê "/usr/local/lib/libraylib.so"

##################################
# End of setup for easy ffi.     #
# Begining of autogenerated ffi. #
##################################

rAYLIB_VERSION_MAJOR ‚áê 5     #
rAYLIB_VERSION_MINOR ‚áê 0     #
rAYLIB_VERSION_PATCH ‚áê 0     #
rAYLIB_VERSION       ‚áê "5.0" #

configFlags ‚áê { # System/Window config flags
  fLAG_VSYNC_HINT               ‚áê 64     # Set to try enabling V-Sync on GPU
  fLAG_FULLSCREEN_MODE          ‚áê 2      # Set to run program in fullscreen
  fLAG_WINDOW_RESIZABLE         ‚áê 4      # Set to allow resizable window
  fLAG_WINDOW_UNDECORATED       ‚áê 8      # Set to disable window decoration (frame and buttons)
  fLAG_WINDOW_HIDDEN            ‚áê 128    # Set to hide window
  fLAG_WINDOW_MINIMIZED         ‚áê 512    # Set to minimize window (iconify)
  fLAG_WINDOW_MAXIMIZED         ‚áê 1024   # Set to maximize window (expanded to monitor)
  fLAG_WINDOW_UNFOCUSED         ‚áê 2048   # Set to window non focused
  fLAG_WINDOW_TOPMOST           ‚áê 4096   # Set to window always on top
  fLAG_WINDOW_ALWAYS_RUN        ‚áê 256    # Set to allow windows running while minimized
  fLAG_WINDOW_TRANSPARENT       ‚áê 16     # Set to allow transparent framebuffer
  fLAG_WINDOW_HIGHDPI           ‚áê 8192   # Set to support HighDPI
  fLAG_WINDOW_MOUSE_PASSTHROUGH ‚áê 16384  # Set to support mouse passthrough, only supported when FLAG_WINDOW_UNDECORATED
  fLAG_BORDERLESS_WINDOWED_MODE ‚áê 32768  # Set to run program in borderless windowed mode
  fLAG_MSAA_4X_HINT             ‚áê 32     # Set to try enabling MSAA 4X
  fLAG_INTERLACED_HINT          ‚áê 65536  # Set to try enabling interlaced video format (for V3D)
}
traceLogLevel ‚áê { # Trace log level
  lOG_ALL     ‚áê 0  # Display all logs
  lOG_TRACE   ‚áê 1  # Trace logging, intended for internal use only
  lOG_DEBUG   ‚áê 2  # Debug logging, used for internal debugging, it should be disabled on release builds
  lOG_INFO    ‚áê 3  # Info logging, used for program execution info
  lOG_WARNING ‚áê 4  # Warning logging, used on recoverable failures
  lOG_ERROR   ‚áê 5  # Error logging, used on unrecoverable failures
  lOG_FATAL   ‚áê 6  # Fatal logging, used to abort program: exit(EXIT_FAILURE)
  lOG_NONE    ‚áê 7  # Disable logging
}
keyboardKey ‚áê { # Keyboard keys (US keyboard layout)
  kEY_NULL          ‚áê 0    # Key: NULL, used for no key pressed
  kEY_APOSTROPHE    ‚áê 39   # Key: '
  kEY_COMMA         ‚áê 44   # Key: ,
  kEY_MINUS         ‚áê 45   # Key: -
  kEY_PERIOD        ‚áê 46   # Key: .
  kEY_SLASH         ‚áê 47   # Key: /
  kEY_ZERO          ‚áê 48   # Key: 0
  kEY_ONE           ‚áê 49   # Key: 1
  kEY_TWO           ‚áê 50   # Key: 2
  kEY_THREE         ‚áê 51   # Key: 3
  kEY_FOUR          ‚áê 52   # Key: 4
  kEY_FIVE          ‚áê 53   # Key: 5
  kEY_SIX           ‚áê 54   # Key: 6
  kEY_SEVEN         ‚áê 55   # Key: 7
  kEY_EIGHT         ‚áê 56   # Key: 8
  kEY_NINE          ‚áê 57   # Key: 9
  kEY_SEMICOLON     ‚áê 59   # Key: ;
  kEY_EQUAL         ‚áê 61   # Key: =
  kEY_A             ‚áê 65   # Key: A | a
  kEY_B             ‚áê 66   # Key: B | b
  kEY_C             ‚áê 67   # Key: C | c
  kEY_D             ‚áê 68   # Key: D | d
  kEY_E             ‚áê 69   # Key: E | e
  kEY_F             ‚áê 70   # Key: F | f
  kEY_G             ‚áê 71   # Key: G | g
  kEY_H             ‚áê 72   # Key: H | h
  kEY_I             ‚áê 73   # Key: I | i
  kEY_J             ‚áê 74   # Key: J | j
  kEY_K             ‚áê 75   # Key: K | k
  kEY_L             ‚áê 76   # Key: L | l
  kEY_M             ‚áê 77   # Key: M | m
  kEY_N             ‚áê 78   # Key: N | n
  kEY_O             ‚áê 79   # Key: O | o
  kEY_P             ‚áê 80   # Key: P | p
  kEY_Q             ‚áê 81   # Key: Q | q
  kEY_R             ‚áê 82   # Key: R | r
  kEY_S             ‚áê 83   # Key: S | s
  kEY_T             ‚áê 84   # Key: T | t
  kEY_U             ‚áê 85   # Key: U | u
  kEY_V             ‚áê 86   # Key: V | v
  kEY_W             ‚áê 87   # Key: W | w
  kEY_X             ‚áê 88   # Key: X | x
  kEY_Y             ‚áê 89   # Key: Y | y
  kEY_Z             ‚áê 90   # Key: Z | z
  kEY_LEFT_BRACKET  ‚áê 91   # Key: [
  kEY_BACKSLASH     ‚áê 92   # Key: '\'
  kEY_RIGHT_BRACKET ‚áê 93   # Key: ]
  kEY_GRAVE         ‚áê 96   # Key: `
  kEY_SPACE         ‚áê 32   # Key: Space
  kEY_ESCAPE        ‚áê 256  # Key: Esc
  kEY_ENTER         ‚áê 257  # Key: Enter
  kEY_TAB           ‚áê 258  # Key: Tab
  kEY_BACKSPACE     ‚áê 259  # Key: Backspace
  kEY_INSERT        ‚áê 260  # Key: Ins
  kEY_DELETE        ‚áê 261  # Key: Del
  kEY_RIGHT         ‚áê 262  # Key: Cursor right
  kEY_LEFT          ‚áê 263  # Key: Cursor left
  kEY_DOWN          ‚áê 264  # Key: Cursor down
  kEY_UP            ‚áê 265  # Key: Cursor up
  kEY_PAGE_UP       ‚áê 266  # Key: Page up
  kEY_PAGE_DOWN     ‚áê 267  # Key: Page down
  kEY_HOME          ‚áê 268  # Key: Home
  kEY_END           ‚áê 269  # Key: End
  kEY_CAPS_LOCK     ‚áê 280  # Key: Caps lock
  kEY_SCROLL_LOCK   ‚áê 281  # Key: Scroll down
  kEY_NUM_LOCK      ‚áê 282  # Key: Num lock
  kEY_PRINT_SCREEN  ‚áê 283  # Key: Print screen
  kEY_PAUSE         ‚áê 284  # Key: Pause
  kEY_F1            ‚áê 290  # Key: F1
  kEY_F2            ‚áê 291  # Key: F2
  kEY_F3            ‚áê 292  # Key: F3
  kEY_F4            ‚áê 293  # Key: F4
  kEY_F5            ‚áê 294  # Key: F5
  kEY_F6            ‚áê 295  # Key: F6
  kEY_F7            ‚áê 296  # Key: F7
  kEY_F8            ‚áê 297  # Key: F8
  kEY_F9            ‚áê 298  # Key: F9
  kEY_F10           ‚áê 299  # Key: F10
  kEY_F11           ‚áê 300  # Key: F11
  kEY_F12           ‚áê 301  # Key: F12
  kEY_LEFT_SHIFT    ‚áê 340  # Key: Shift left
  kEY_LEFT_CONTROL  ‚áê 341  # Key: Control left
  kEY_LEFT_ALT      ‚áê 342  # Key: Alt left
  kEY_LEFT_SUPER    ‚áê 343  # Key: Super left
  kEY_RIGHT_SHIFT   ‚áê 344  # Key: Shift right
  kEY_RIGHT_CONTROL ‚áê 345  # Key: Control right
  kEY_RIGHT_ALT     ‚áê 346  # Key: Alt right
  kEY_RIGHT_SUPER   ‚áê 347  # Key: Super right
  kEY_KB_MENU       ‚áê 348  # Key: KB menu
  kEY_KP_0          ‚áê 320  # Key: Keypad 0
  kEY_KP_1          ‚áê 321  # Key: Keypad 1
  kEY_KP_2          ‚áê 322  # Key: Keypad 2
  kEY_KP_3          ‚áê 323  # Key: Keypad 3
  kEY_KP_4          ‚áê 324  # Key: Keypad 4
  kEY_KP_5          ‚áê 325  # Key: Keypad 5
  kEY_KP_6          ‚áê 326  # Key: Keypad 6
  kEY_KP_7          ‚áê 327  # Key: Keypad 7
  kEY_KP_8          ‚áê 328  # Key: Keypad 8
  kEY_KP_9          ‚áê 329  # Key: Keypad 9
  kEY_KP_DECIMAL    ‚áê 330  # Key: Keypad .
  kEY_KP_DIVIDE     ‚áê 331  # Key: Keypad /
  kEY_KP_MULTIPLY   ‚áê 332  # Key: Keypad *
  kEY_KP_SUBTRACT   ‚áê 333  # Key: Keypad -
  kEY_KP_ADD        ‚áê 334  # Key: Keypad +
  kEY_KP_ENTER      ‚áê 335  # Key: Keypad Enter
  kEY_KP_EQUAL      ‚áê 336  # Key: Keypad =
  kEY_BACK          ‚áê 4    # Key: Android back button
  kEY_MENU          ‚áê 82   # Key: Android menu button
  kEY_VOLUME_UP     ‚áê 24   # Key: Android volume up button
  kEY_VOLUME_DOWN   ‚áê 25   # Key: Android volume down button
}
mouseButton ‚áê { # Mouse buttons
  mOUSE_BUTTON_LEFT    ‚áê 0  # Mouse button left
  mOUSE_BUTTON_RIGHT   ‚áê 1  # Mouse button right
  mOUSE_BUTTON_MIDDLE  ‚áê 2  # Mouse button middle (pressed wheel)
  mOUSE_BUTTON_SIDE    ‚áê 3  # Mouse button side (advanced mouse device)
  mOUSE_BUTTON_EXTRA   ‚áê 4  # Mouse button extra (advanced mouse device)
  mOUSE_BUTTON_FORWARD ‚áê 5  # Mouse button forward (advanced mouse device)
  mOUSE_BUTTON_BACK    ‚áê 6  # Mouse button back (advanced mouse device)
}
mouseCursor ‚áê { # Mouse cursor
  mOUSE_CURSOR_DEFAULT       ‚áê 0   # Default pointer shape
  mOUSE_CURSOR_ARROW         ‚áê 1   # Arrow shape
  mOUSE_CURSOR_IBEAM         ‚áê 2   # Text writing cursor shape
  mOUSE_CURSOR_CROSSHAIR     ‚áê 3   # Cross shape
  mOUSE_CURSOR_POINTING_HAND ‚áê 4   # Pointing hand cursor
  mOUSE_CURSOR_RESIZE_EW     ‚áê 5   # Horizontal resize/move arrow shape
  mOUSE_CURSOR_RESIZE_NS     ‚áê 6   # Vertical resize/move arrow shape
  mOUSE_CURSOR_RESIZE_NWSE   ‚áê 7   # Top-left to bottom-right diagonal resize/move arrow shape
  mOUSE_CURSOR_RESIZE_NESW   ‚áê 8   # The top-right to bottom-left diagonal resize/move arrow shape
  mOUSE_CURSOR_RESIZE_ALL    ‚áê 9   # The omnidirectional resize/move cursor shape
  mOUSE_CURSOR_NOT_ALLOWED   ‚áê 10  # The operation-not-allowed shape
}
gamepadButton ‚áê { # Gamepad buttons
  gAMEPAD_BUTTON_UNKNOWN          ‚áê 0   # Unknown button, just for error checking
  gAMEPAD_BUTTON_LEFT_FACE_UP     ‚áê 1   # Gamepad left DPAD up button
  gAMEPAD_BUTTON_LEFT_FACE_RIGHT  ‚áê 2   # Gamepad left DPAD right button
  gAMEPAD_BUTTON_LEFT_FACE_DOWN   ‚áê 3   # Gamepad left DPAD down button
  gAMEPAD_BUTTON_LEFT_FACE_LEFT   ‚áê 4   # Gamepad left DPAD left button
  gAMEPAD_BUTTON_RIGHT_FACE_UP    ‚áê 5   # Gamepad right button up (i.e. PS3: Triangle, Xbox: Y)
  gAMEPAD_BUTTON_RIGHT_FACE_RIGHT ‚áê 6   # Gamepad right button right (i.e. PS3: Square, Xbox: X)
  gAMEPAD_BUTTON_RIGHT_FACE_DOWN  ‚áê 7   # Gamepad right button down (i.e. PS3: Cross, Xbox: A)
  gAMEPAD_BUTTON_RIGHT_FACE_LEFT  ‚áê 8   # Gamepad right button left (i.e. PS3: Circle, Xbox: B)
  gAMEPAD_BUTTON_LEFT_TRIGGER_1   ‚áê 9   # Gamepad top/back trigger left (first), it could be a trailing button
  gAMEPAD_BUTTON_LEFT_TRIGGER_2   ‚áê 10  # Gamepad top/back trigger left (second), it could be a trailing button
  gAMEPAD_BUTTON_RIGHT_TRIGGER_1  ‚áê 11  # Gamepad top/back trigger right (one), it could be a trailing button
  gAMEPAD_BUTTON_RIGHT_TRIGGER_2  ‚áê 12  # Gamepad top/back trigger right (second), it could be a trailing button
  gAMEPAD_BUTTON_MIDDLE_LEFT      ‚áê 13  # Gamepad center buttons, left one (i.e. PS3: Select)
  gAMEPAD_BUTTON_MIDDLE           ‚áê 14  # Gamepad center buttons, middle one (i.e. PS3: PS, Xbox: XBOX)
  gAMEPAD_BUTTON_MIDDLE_RIGHT     ‚áê 15  # Gamepad center buttons, right one (i.e. PS3: Start)
  gAMEPAD_BUTTON_LEFT_THUMB       ‚áê 16  # Gamepad joystick pressed button left
  gAMEPAD_BUTTON_RIGHT_THUMB      ‚áê 17  # Gamepad joystick pressed button right
}
gamepadAxis ‚áê { # Gamepad axis
  gAMEPAD_AXIS_LEFT_X        ‚áê 0  # Gamepad left stick X axis
  gAMEPAD_AXIS_LEFT_Y        ‚áê 1  # Gamepad left stick Y axis
  gAMEPAD_AXIS_RIGHT_X       ‚áê 2  # Gamepad right stick X axis
  gAMEPAD_AXIS_RIGHT_Y       ‚áê 3  # Gamepad right stick Y axis
  gAMEPAD_AXIS_LEFT_TRIGGER  ‚áê 4  # Gamepad back trigger left, pressure level: [1..-1]
  gAMEPAD_AXIS_RIGHT_TRIGGER ‚áê 5  # Gamepad back trigger right, pressure level: [1..-1]
}
materialMapIndex ‚áê { # Material map index
  mATERIAL_MAP_ALBEDO     ‚áê 0   # Albedo material (same as: MATERIAL_MAP_DIFFUSE)
  mATERIAL_MAP_METALNESS  ‚áê 1   # Metalness material (same as: MATERIAL_MAP_SPECULAR)
  mATERIAL_MAP_NORMAL     ‚áê 2   # Normal material
  mATERIAL_MAP_ROUGHNESS  ‚áê 3   # Roughness material
  mATERIAL_MAP_OCCLUSION  ‚áê 4   # Ambient occlusion material
  mATERIAL_MAP_EMISSION   ‚áê 5   # Emission material
  mATERIAL_MAP_HEIGHT     ‚áê 6   # Heightmap material
  mATERIAL_MAP_CUBEMAP    ‚áê 7   # Cubemap material (NOTE: Uses GL_TEXTURE_CUBE_MAP)
  mATERIAL_MAP_IRRADIANCE ‚áê 8   # Irradiance material (NOTE: Uses GL_TEXTURE_CUBE_MAP)
  mATERIAL_MAP_PREFILTER  ‚áê 9   # Prefilter material (NOTE: Uses GL_TEXTURE_CUBE_MAP)
  mATERIAL_MAP_BRDF       ‚áê 10  # Brdf material
}
shaderLocationIndex ‚áê { # Shader location index
  sHADER_LOC_VERTEX_POSITION   ‚áê 0   # Shader location: vertex attribute: position
  sHADER_LOC_VERTEX_TEXCOORD01 ‚áê 1   # Shader location: vertex attribute: texcoord01
  sHADER_LOC_VERTEX_TEXCOORD02 ‚áê 2   # Shader location: vertex attribute: texcoord02
  sHADER_LOC_VERTEX_NORMAL     ‚áê 3   # Shader location: vertex attribute: normal
  sHADER_LOC_VERTEX_TANGENT    ‚áê 4   # Shader location: vertex attribute: tangent
  sHADER_LOC_VERTEX_COLOR      ‚áê 5   # Shader location: vertex attribute: color
  sHADER_LOC_MATRIX_MVP        ‚áê 6   # Shader location: matrix uniform: model-view-projection
  sHADER_LOC_MATRIX_VIEW       ‚áê 7   # Shader location: matrix uniform: view (camera transform)
  sHADER_LOC_MATRIX_PROJECTION ‚áê 8   # Shader location: matrix uniform: projection
  sHADER_LOC_MATRIX_MODEL      ‚áê 9   # Shader location: matrix uniform: model (transform)
  sHADER_LOC_MATRIX_NORMAL     ‚áê 10  # Shader location: matrix uniform: normal
  sHADER_LOC_VECTOR_VIEW       ‚áê 11  # Shader location: vector uniform: view
  sHADER_LOC_COLOR_DIFFUSE     ‚áê 12  # Shader location: vector uniform: diffuse color
  sHADER_LOC_COLOR_SPECULAR    ‚áê 13  # Shader location: vector uniform: specular color
  sHADER_LOC_COLOR_AMBIENT     ‚áê 14  # Shader location: vector uniform: ambient color
  sHADER_LOC_MAP_ALBEDO        ‚áê 15  # Shader location: sampler2d texture: albedo (same as: SHADER_LOC_MAP_DIFFUSE)
  sHADER_LOC_MAP_METALNESS     ‚áê 16  # Shader location: sampler2d texture: metalness (same as: SHADER_LOC_MAP_SPECULAR)
  sHADER_LOC_MAP_NORMAL        ‚áê 17  # Shader location: sampler2d texture: normal
  sHADER_LOC_MAP_ROUGHNESS     ‚áê 18  # Shader location: sampler2d texture: roughness
  sHADER_LOC_MAP_OCCLUSION     ‚áê 19  # Shader location: sampler2d texture: occlusion
  sHADER_LOC_MAP_EMISSION      ‚áê 20  # Shader location: sampler2d texture: emission
  sHADER_LOC_MAP_HEIGHT        ‚áê 21  # Shader location: sampler2d texture: height
  sHADER_LOC_MAP_CUBEMAP       ‚áê 22  # Shader location: samplerCube texture: cubemap
  sHADER_LOC_MAP_IRRADIANCE    ‚áê 23  # Shader location: samplerCube texture: irradiance
  sHADER_LOC_MAP_PREFILTER     ‚áê 24  # Shader location: samplerCube texture: prefilter
  sHADER_LOC_MAP_BRDF          ‚áê 25  # Shader location: sampler2d texture: brdf
}
shaderUniformDataType ‚áê { # Shader uniform data type
  sHADER_UNIFORM_FLOAT     ‚áê 0  # Shader uniform type: float
  sHADER_UNIFORM_VEC2      ‚áê 1  # Shader uniform type: vec2 (2 float)
  sHADER_UNIFORM_VEC3      ‚áê 2  # Shader uniform type: vec3 (3 float)
  sHADER_UNIFORM_VEC4      ‚áê 3  # Shader uniform type: vec4 (4 float)
  sHADER_UNIFORM_INT       ‚áê 4  # Shader uniform type: int
  sHADER_UNIFORM_IVEC2     ‚áê 5  # Shader uniform type: ivec2 (2 int)
  sHADER_UNIFORM_IVEC3     ‚áê 6  # Shader uniform type: ivec3 (3 int)
  sHADER_UNIFORM_IVEC4     ‚áê 7  # Shader uniform type: ivec4 (4 int)
  sHADER_UNIFORM_SAMPLER2D ‚áê 8  # Shader uniform type: sampler2d
}
shaderAttributeDataType ‚áê { # Shader attribute data types
  sHADER_ATTRIB_FLOAT ‚áê 0  # Shader attribute type: float
  sHADER_ATTRIB_VEC2  ‚áê 1  # Shader attribute type: vec2 (2 float)
  sHADER_ATTRIB_VEC3  ‚áê 2  # Shader attribute type: vec3 (3 float)
  sHADER_ATTRIB_VEC4  ‚áê 3  # Shader attribute type: vec4 (4 float)
}
pixelFormat ‚áê { # Pixel formats
  pIXELFORMAT_UNCOMPRESSED_GRAYSCALE    ‚áê 1   # 8 bit per pixel (no alpha)
  pIXELFORMAT_UNCOMPRESSED_GRAY_ALPHA   ‚áê 2   # 8*2 bpp (2 channels)
  pIXELFORMAT_UNCOMPRESSED_R5G6B5       ‚áê 3   # 16 bpp
  pIXELFORMAT_UNCOMPRESSED_R8G8B8       ‚áê 4   # 24 bpp
  pIXELFORMAT_UNCOMPRESSED_R5G5B5A1     ‚áê 5   # 16 bpp (1 bit alpha)
  pIXELFORMAT_UNCOMPRESSED_R4G4B4A4     ‚áê 6   # 16 bpp (4 bit alpha)
  pIXELFORMAT_UNCOMPRESSED_R8G8B8A8     ‚áê 7   # 32 bpp
  pIXELFORMAT_UNCOMPRESSED_R32          ‚áê 8   # 32 bpp (1 channel - float)
  pIXELFORMAT_UNCOMPRESSED_R32G32B32    ‚áê 9   # 32*3 bpp (3 channels - float)
  pIXELFORMAT_UNCOMPRESSED_R32G32B32A32 ‚áê 10  # 32*4 bpp (4 channels - float)
  pIXELFORMAT_UNCOMPRESSED_R16          ‚áê 11  # 16 bpp (1 channel - half float)
  pIXELFORMAT_UNCOMPRESSED_R16G16B16    ‚áê 12  # 16*3 bpp (3 channels - half float)
  pIXELFORMAT_UNCOMPRESSED_R16G16B16A16 ‚áê 13  # 16*4 bpp (4 channels - half float)
  pIXELFORMAT_COMPRESSED_DXT1_RGB       ‚áê 14  # 4 bpp (no alpha)
  pIXELFORMAT_COMPRESSED_DXT1_RGBA      ‚áê 15  # 4 bpp (1 bit alpha)
  pIXELFORMAT_COMPRESSED_DXT3_RGBA      ‚áê 16  # 8 bpp
  pIXELFORMAT_COMPRESSED_DXT5_RGBA      ‚áê 17  # 8 bpp
  pIXELFORMAT_COMPRESSED_ETC1_RGB       ‚áê 18  # 4 bpp
  pIXELFORMAT_COMPRESSED_ETC2_RGB       ‚áê 19  # 4 bpp
  pIXELFORMAT_COMPRESSED_ETC2_EAC_RGBA  ‚áê 20  # 8 bpp
  pIXELFORMAT_COMPRESSED_PVRT_RGB       ‚áê 21  # 4 bpp
  pIXELFORMAT_COMPRESSED_PVRT_RGBA      ‚áê 22  # 4 bpp
  pIXELFORMAT_COMPRESSED_ASTC_4x4_RGBA  ‚áê 23  # 8 bpp
  pIXELFORMAT_COMPRESSED_ASTC_8x8_RGBA  ‚áê 24  # 2 bpp
}
textureFilter ‚áê { # Texture parameters: filter mode
  tEXTURE_FILTER_POINT           ‚áê 0  # No filter, just pixel approximation
  tEXTURE_FILTER_BILINEAR        ‚áê 1  # Linear filtering
  tEXTURE_FILTER_TRILINEAR       ‚áê 2  # Trilinear filtering (linear with mipmaps)
  tEXTURE_FILTER_ANISOTROPIC_4X  ‚áê 3  # Anisotropic filtering 4x
  tEXTURE_FILTER_ANISOTROPIC_8X  ‚áê 4  # Anisotropic filtering 8x
  tEXTURE_FILTER_ANISOTROPIC_16X ‚áê 5  # Anisotropic filtering 16x
}
textureWrap ‚áê { # Texture parameters: wrap mode
  tEXTURE_WRAP_REPEAT        ‚áê 0  # Repeats texture in tiled mode
  tEXTURE_WRAP_CLAMP         ‚áê 1  # Clamps texture to edge pixel in tiled mode
  tEXTURE_WRAP_MIRROR_REPEAT ‚áê 2  # Mirrors and repeats the texture in tiled mode
  tEXTURE_WRAP_MIRROR_CLAMP  ‚áê 3  # Mirrors and clamps to border the texture in tiled mode
}
cubemapLayout ‚áê { # Cubemap layouts
  cUBEMAP_LAYOUT_AUTO_DETECT         ‚áê 0  # Automatically detect layout type
  cUBEMAP_LAYOUT_LINE_VERTICAL       ‚áê 1  # Layout is defined by a vertical line with faces
  cUBEMAP_LAYOUT_LINE_HORIZONTAL     ‚áê 2  # Layout is defined by a horizontal line with faces
  cUBEMAP_LAYOUT_CROSS_THREE_BY_FOUR ‚áê 3  # Layout is defined by a 3x4 cross with cubemap faces
  cUBEMAP_LAYOUT_CROSS_FOUR_BY_THREE ‚áê 4  # Layout is defined by a 4x3 cross with cubemap faces
  cUBEMAP_LAYOUT_PANORAMA            ‚áê 5  # Layout is defined by a panorama image (equirrectangular map)
}
fontType ‚áê { # Font type, defines generation method
  fONT_DEFAULT ‚áê 0  # Default font generation, anti-aliased
  fONT_BITMAP  ‚áê 1  # Bitmap font generation, no anti-aliasing
  fONT_SDF     ‚áê 2  # SDF font generation, requires external shader
}
blendMode ‚áê { # Color blending modes (pre-defined)
  bLEND_ALPHA             ‚áê 0  # Blend textures considering alpha (default)
  bLEND_ADDITIVE          ‚áê 1  # Blend textures adding colors
  bLEND_MULTIPLIED        ‚áê 2  # Blend textures multiplying colors
  bLEND_ADD_COLORS        ‚áê 3  # Blend textures adding colors (alternative)
  bLEND_SUBTRACT_COLORS   ‚áê 4  # Blend textures subtracting colors (alternative)
  bLEND_ALPHA_PREMULTIPLY ‚áê 5  # Blend premultiplied textures considering alpha
  bLEND_CUSTOM            ‚áê 6  # Blend textures using custom src/dst factors (use rlSetBlendFactors())
  bLEND_CUSTOM_SEPARATE   ‚áê 7  # Blend textures using custom rgb/alpha separate src/dst factors (use rlSetBlendFactorsSeparate())
}
gesture ‚áê { # Gesture
  gESTURE_NONE        ‚áê 0    # No gesture
  gESTURE_TAP         ‚áê 1    # Tap gesture
  gESTURE_DOUBLETAP   ‚áê 2    # Double tap gesture
  gESTURE_HOLD        ‚áê 4    # Hold gesture
  gESTURE_DRAG        ‚áê 8    # Drag gesture
  gESTURE_SWIPE_RIGHT ‚áê 16   # Swipe right gesture
  gESTURE_SWIPE_LEFT  ‚áê 32   # Swipe left gesture
  gESTURE_SWIPE_UP    ‚áê 64   # Swipe up gesture
  gESTURE_SWIPE_DOWN  ‚áê 128  # Swipe down gesture
  gESTURE_PINCH_IN    ‚áê 256  # Pinch in gesture
  gESTURE_PINCH_OUT   ‚áê 512  # Pinch out gesture
}
cameraMode ‚áê { # Camera system modes
  cAMERA_CUSTOM       ‚áê 0  # Custom camera
  cAMERA_FREE         ‚áê 1  # Free camera
  cAMERA_ORBITAL      ‚áê 2  # Orbital camera
  cAMERA_FIRST_PERSON ‚áê 3  # First person camera
  cAMERA_THIRD_PERSON ‚áê 4  # Third person camera
}
cameraProjection ‚áê { # Camera projection
  cAMERA_PERSPECTIVE  ‚áê 0  # Perspective projection
  cAMERA_ORTHOGRAPHIC ‚áê 1  # Orthographic projection
}
nPatchLayout ‚áê { # N-patch layout
  nPATCH_NINE_PATCH             ‚áê 0  # Npatch layout: 3x3 tiles
  nPATCH_THREE_PATCH_VERTICAL   ‚áê 1  # Npatch layout: 1x3 tiles
  nPATCH_THREE_PATCH_HORIZONTAL ‚áê 2  # Npatch layout: 3x1 tiles
}

v2 ‚áê ‚ü® # Vector2, 2 components
  f # x  # Vector x component
  f # y  # Vector y component
‚ü©
v3 ‚áê ‚ü® # Vector3, 3 components
  f # x  # Vector x component
  f # y  # Vector y component
  f # z  # Vector z component
‚ü©
v4 ‚áê ‚ü® # Vector4, 4 components
  f # x  # Vector x component
  f # y  # Vector y component
  f # z  # Vector z component
  f # w  # Vector w component
‚ü©
quaternion ‚áê v4 # Quaternion, 4 components (Vector4 alias)
matrix ‚áê ‚ü® # Matrix, 4x4 components, column major, OpenGL style, right-handed
  f # m0   # Matrix first row (4 components)
  f # m4   # Matrix first row (4 components)
  f # m8   # Matrix first row (4 components)
  f # m12  # Matrix first row (4 components)
  f # m1   # Matrix second row (4 components)
  f # m5   # Matrix second row (4 components)
  f # m9   # Matrix second row (4 components)
  f # m13  # Matrix second row (4 components)
  f # m2   # Matrix third row (4 components)
  f # m6   # Matrix third row (4 components)
  f # m10  # Matrix third row (4 components)
  f # m14  # Matrix third row (4 components)
  f # m3   # Matrix fourth row (4 components)
  f # m7   # Matrix fourth row (4 components)
  f # m11  # Matrix fourth row (4 components)
  f # m15  # Matrix fourth row (4 components)
‚ü©
color ‚áê ‚ü® # Color, 4 components, R8G8B8A8 (32bit)
  u8 # r  # Color red value
  u8 # g  # Color green value
  u8 # b  # Color blue value
  u8 # a  # Color alpha value
‚ü©
rectangle ‚áê ‚ü® # Rectangle, 4 components
  f # x       # Rectangle top-left corner position x
  f # y       # Rectangle top-left corner position y
  f # width   # Rectangle width
  f # height  # Rectangle height
‚ü©
image ‚áê ‚ü® # Image, pixel data stored in CPU memory (RAM)
  ptr # data     # Image raw data
  i   # width    # Image base width
  i   # height   # Image base height
  i   # mipmaps  # Mipmap levels, 1 by default
  i   # format   # Data format (PixelFormat type)
‚ü©
texture ‚áê ‚ü® # Texture, tex data stored in GPU memory (VRAM)
  u # id       # OpenGL texture id
  i # width    # Texture base width
  i # height   # Texture base height
  i # mipmaps  # Mipmap levels, 1 by default
  i # format   # Data format (PixelFormat type)
‚ü©
texture2D ‚áê texture # Texture2D, same as Texture
textureCubemap ‚áê texture # TextureCubemap, same as Texture
renderTexture ‚áê ‚ü® # RenderTexture, fbo for texture rendering
  u       # id       # OpenGL framebuffer object id
  texture # texture  # Color buffer attachment texture
  texture # depth    # Depth buffer attachment texture
‚ü©
renderTexture2D ‚áê renderTexture # RenderTexture2D, same as RenderTexture
nPatchInfo ‚áê ‚ü® # NPatchInfo, n-patch layout info
  rectangle # source  # Texture source rectangle
  i         # left    # Left border offset
  i         # top     # Top border offset
  i         # right   # Right border offset
  i         # bottom  # Bottom border offset
  i         # layout  # Layout of the n-patch: 3x3, 1x3 or 3x1
‚ü©
glyphInfo ‚áê ‚ü® # GlyphInfo, font characters glyphs info
  i     # value     # Character value (Unicode)
  i     # offsetX   # Character offset X when drawing
  i     # offsetY   # Character offset Y when drawing
  i     # advanceX  # Character advance position X
  image # image     # Character image data
‚ü©
font ‚áê ‚ü® # Font, font texture and GlyphInfo array data
  i             # baseSize      # Base size (default chars height)
  i             # glyphCount    # Number of glyph characters
  i             # glyphPadding  # Padding around the glyph characters
  texture2D     # texture       # Texture atlas containing the glyphs
  "*"‚àærectangle # recs          # Rectangles in texture for the glyphs
  "*"‚àæglyphInfo # glyphs        # Glyphs info data
‚ü©
camera3D ‚áê ‚ü® # Camera, defines position/orientation in 3d space
  v3 # position    # Camera position
  v3 # target      # Camera target it looks-at
  v3 # up          # Camera up vector (rotation over its axis)
  f  # fovy        # Camera field-of-view aperture in Y (degrees) in perspective, used as near plane width in orthographic
  i  # projection  # Camera projection: CAMERA_PERSPECTIVE or CAMERA_ORTHOGRAPHIC
‚ü©
camera ‚áê camera3D # Camera type fallback, defaults to Camera3D
camera2D ‚áê ‚ü® # Camera2D, defines position/orientation in 2d space
  v2 # offset    # Camera offset (displacement from target)
  v2 # target    # Camera target (rotation and zoom origin)
  f  # rotation  # Camera rotation in degrees
  f  # zoom      # Camera zoom (scaling), should be 1.0f by default
‚ü©
mesh ‚áê ‚ü® # Mesh, vertex data and vao/vbo
  i      # vertexCount    # Number of vertices stored in arrays
  i      # triangleCount  # Number of triangles stored (indexed or not)
  "*"‚àæf  # vertices       # Vertex position (XYZ - 3 components per vertex) (shader-location = 0)
  "*"‚àæf  # texcoords      # Vertex texture coordinates (UV - 2 components per vertex) (shader-location = 1)
  "*"‚àæf  # texcoords2     # Vertex texture second coordinates (UV - 2 components per vertex) (shader-location = 5)
  "*"‚àæf  # normals        # Vertex normals (XYZ - 3 components per vertex) (shader-location = 2)
  "*"‚àæf  # tangents       # Vertex tangents (XYZW - 4 components per vertex) (shader-location = 4)
  ustr   # colors         # Vertex colors (RGBA - 4 components per vertex) (shader-location = 3)
  "*u16" # indices        # Vertex indices (in case vertex data comes indexed)
  "*"‚àæf  # animVertices   # Animated vertex positions (after bones transformations)
  "*"‚àæf  # animNormals    # Animated normals (after bones transformations)
  ustr   # boneIds        # Vertex bone ids, max 255 bone ids, up to 4 bones influence by vertex (skinning)
  "*"‚àæf  # boneWeights    # Vertex bone weight, up to 4 bones influence by vertex (skinning)
  u      # vaoId          # OpenGL Vertex Array Object id
  "*"‚àæu  # vboId          # OpenGL Vertex Buffer Objects id (default vertex data)
‚ü©
shader ‚áê ‚ü® # Shader
  u     # id    # Shader program id
  "*"‚àæi # locs  # Shader locations array (RL_MAX_SHADER_LOCATIONS)
‚ü©
materialMap ‚áê ‚ü® # MaterialMap
  texture2D # texture  # Material map texture
  color     # color    # Material map color
  f         # value    # Material map value
‚ü©
material ‚áê ‚ü® # Material, includes shader and maps
  shader          # shader  # Material shader
  "*"‚àæmaterialMap # maps    # Material maps array (MAX_MATERIAL_MAPS)
  "[4]"‚àæf         # params  # Material generic parameters (if required)
‚ü©
transform ‚áê ‚ü® # Transform, vertex transformation data
  v3         # translation  # Translation
  quaternion # rotation     # Rotation
  v3         # scale        # Scale
‚ü©
boneInfo ‚áê ‚ü® # Bone, skeletal animation bone
  "[32]"‚àæu8 # name    # Bone name
  i         # parent  # Bone parent
‚ü©
model ‚áê ‚ü® # Model, meshes, materials and animation data
  matrix        # transform      # Local transform matrix
  i             # meshCount      # Number of meshes
  i             # materialCount  # Number of materials
  "*"‚àæmesh      # meshes         # Meshes array
  "*"‚àæmaterial  # materials      # Materials array
  "*"‚àæi         # meshMaterial   # Mesh material number
  i             # boneCount      # Number of bones
  "*"‚àæboneInfo  # bones          # Bones information (skeleton)
  "*"‚àætransform # bindPose       # Bones base transformation (pose)
‚ü©
modelAnimation ‚áê ‚ü® # ModelAnimation
  i              # boneCount   # Number of bones
  i              # frameCount  # Number of animation frames
  "*"‚àæboneInfo   # bones       # Bones information (skeleton)
  "**"‚àætransform # framePoses  # Poses array by frame
  "[32]"‚àæu8      # name        # Animation name
‚ü©
ray ‚áê ‚ü® # Ray, ray for raycasting
  v3 # position   # Ray position (origin)
  v3 # direction  # Ray direction
‚ü©
rayCollision ‚áê ‚ü® # RayCollision, ray hit information
  bool # hit       # Did the ray hit something?
  f    # distance  # Distance to the nearest hit
  v3   # point     # Point of the nearest hit
  v3   # normal    # Surface normal of hit
‚ü©
boundingBox ‚áê ‚ü® # BoundingBox
  v3 # min  # Minimum vertex box-corner
  v3 # max  # Maximum vertex box-corner
‚ü©
wave ‚áê ‚ü® # Wave, audio wave data
  u   # frameCount  # Total number of frames (considering channels)
  u   # sampleRate  # Frequency (samples per second)
  u   # sampleSize  # Bit depth (bits per sample): 8, 16, 32 (24 not supported)
  u   # channels    # Number of channels (1-mono, 2-stereo, ...)
  ptr # data        # Buffer data pointer
‚ü©
audioStream ‚áê ‚ü® # AudioStream, custom audio stream
  ptr # buffer      # Pointer to internal data used by the audio system
  ptr # processor   # Pointer to internal data processor, useful for audio effects
  u   # sampleRate  # Frequency (samples per second)
  u   # sampleSize  # Bit depth (bits per sample): 8, 16, 32 (24 not supported)
  u   # channels    # Number of channels (1-mono, 2-stereo, ...)
‚ü©
sound ‚áê ‚ü® # Sound
  audioStream # stream      # Audio stream
  u           # frameCount  # Total number of frames (considering channels)
‚ü©
music ‚áê ‚ü® # Music, audio stream, anything longer than ~10 seconds should be streamed
  audioStream # stream      # Audio stream
  u           # frameCount  # Total number of frames (considering channels)
  bool        # looping     # Music looping enable
  i           # ctxType     # Type of music context (audio filetype)
  ptr         # ctxData     # Audio context data, depends on type
‚ü©
vrDeviceInfo ‚áê ‚ü® # VrDeviceInfo, Head-Mounted-Display device parameters
  i       # hResolution             # Horizontal resolution in pixels
  i       # vResolution             # Vertical resolution in pixels
  f       # hScreenSize             # Horizontal size in meters
  f       # vScreenSize             # Vertical size in meters
  f       # vScreenCenter           # Screen center in meters
  f       # eyeToScreenDistance     # Distance between eye and display in meters
  f       # lensSeparationDistance  # Lens separation distance in meters
  f       # interpupillaryDistance  # IPD (distance between pupils) in meters
  "[4]"‚àæf # lensDistortionValues    # Lens distortion constant parameters
  "[4]"‚àæf # chromaAbCorrection      # Chromatic aberration correction parameters
‚ü©
vrStereoConfig ‚áê ‚ü® # VrStereoConfig, VR stereo rendering configuration for simulator
  "[2]"‚àæmatrix # projection         # VR projection matrices (per eye)
  "[2]"‚àæmatrix # viewOffset         # VR view offset matrices (per eye)
  "[2]"‚àæf      # leftLensCenter     # VR left lens center
  "[2]"‚àæf      # rightLensCenter    # VR right lens center
  "[2]"‚àæf      # leftScreenCenter   # VR left screen center
  "[2]"‚àæf      # rightScreenCenter  # VR right screen center
  "[2]"‚àæf      # scale              # VR distortion scale
  "[2]"‚àæf      # scaleIn            # VR distortion scale in
‚ü©
filePathList ‚áê ‚ü® # File path list
  u       # capacity  # Filepaths max entries
  u       # count     # Filepaths entries count
  "*"‚àæstr # paths     # Filepaths entries
‚ü©
automationEvent ‚áê ‚ü® # Automation event
  u       # frame   # Event frame
  u       # type    # Event type (AutomationEventType)
  "[4]"‚àæi # params  # Event parameters (if required)
‚ü©
automationEventList ‚áê ‚ü® # Automation event list
  u                   # capacity  # Events max entries (MAX_AUTOMATION_EVENTS)
  u                   # count     # Events entries count
  "*"‚àæautomationEvent # events    # Events entries
‚ü©

initWindow                       ‚áê                         "InitWindow"                       _R‚ü®i‚ãÑi‚ãÑstr‚ü©                                       # width height title                                                # Initialize window and OpenGL context
closeWindow                      ‚áê                         "CloseWindow"                      _R‚ü®‚ü©                                              #                                                                   # Close window and unload OpenGL context
windowShouldClose                ‚áê bool                    "WindowShouldClose"                _R‚ü®‚ü©                                              #                                                                   # Check if application should close (KEY_ESCAPE pressed or windows close icon clicked)
isWindowReady                    ‚áê bool                    "IsWindowReady"                    _R‚ü®‚ü©                                              #                                                                   # Check if window has been initialized successfully
isWindowFullscreen               ‚áê bool                    "IsWindowFullscreen"               _R‚ü®‚ü©                                              #                                                                   # Check if window is currently fullscreen
isWindowHidden                   ‚áê bool                    "IsWindowHidden"                   _R‚ü®‚ü©                                              #                                                                   # Check if window is currently hidden (only PLATFORM_DESKTOP)
isWindowMinimized                ‚áê bool                    "IsWindowMinimized"                _R‚ü®‚ü©                                              #                                                                   # Check if window is currently minimized (only PLATFORM_DESKTOP)
isWindowMaximized                ‚áê bool                    "IsWindowMaximized"                _R‚ü®‚ü©                                              #                                                                   # Check if window is currently maximized (only PLATFORM_DESKTOP)
isWindowFocused                  ‚áê bool                    "IsWindowFocused"                  _R‚ü®‚ü©                                              #                                                                   # Check if window is currently focused (only PLATFORM_DESKTOP)
isWindowResized                  ‚áê bool                    "IsWindowResized"                  _R‚ü®‚ü©                                              #                                                                   # Check if window has been resized last frame
isWindowState                    ‚áê bool                    "IsWindowState"                    _R‚ü®u‚ü©                                             # flag                                                              # Check if one specific window flag is enabled
setWindowState                   ‚áê                         "SetWindowState"                   _R‚ü®u‚ü©                                             # flags                                                             # Set window configuration state using flags (only PLATFORM_DESKTOP)
clearWindowState                 ‚áê                         "ClearWindowState"                 _R‚ü®u‚ü©                                             # flags                                                             # Clear window configuration state flags
toggleFullscreen                 ‚áê                         "ToggleFullscreen"                 _R‚ü®‚ü©                                              #                                                                   # Toggle window state: fullscreen/windowed (only PLATFORM_DESKTOP)
toggleBorderlessWindowed         ‚áê                         "ToggleBorderlessWindowed"         _R‚ü®‚ü©                                              #                                                                   # Toggle window state: borderless windowed (only PLATFORM_DESKTOP)
maximizeWindow                   ‚áê                         "MaximizeWindow"                   _R‚ü®‚ü©                                              #                                                                   # Set window state: maximized, if resizable (only PLATFORM_DESKTOP)
minimizeWindow                   ‚áê                         "MinimizeWindow"                   _R‚ü®‚ü©                                              #                                                                   # Set window state: minimized, if resizable (only PLATFORM_DESKTOP)
restoreWindow                    ‚áê                         "RestoreWindow"                    _R‚ü®‚ü©                                              #                                                                   # Set window state: not minimized/maximized (only PLATFORM_DESKTOP)
setWindowIcon                    ‚áê                         "SetWindowIcon"                    _R‚ü®image‚ü©                                         # image                                                             # Set icon for window (single image, RGBA 32bit, only PLATFORM_DESKTOP)
setWindowIcons                   ‚áê                         "SetWindowIcons"                   _R‚ü®"*"‚àæimage‚ãÑi‚ü©                                   # images count                                                      # Set icon for window (multiple images, RGBA 32bit, only PLATFORM_DESKTOP)
setWindowIconsRef                ‚áê                         "SetWindowIcons"                   _R‚ü®"&"‚àæimage‚ãÑi‚ü©                                   # images count                                                      # Set icon for window (multiple images, RGBA 32bit, only PLATFORM_DESKTOP)
setWindowTitle                   ‚áê                         "SetWindowTitle"                   _R‚ü®str‚ü©                                           # title                                                             # Set title for window (only PLATFORM_DESKTOP and PLATFORM_WEB)
setWindowPosition                ‚áê                         "SetWindowPosition"                _R‚ü®i‚ãÑi‚ü©                                           # x y                                                               # Set window position on screen (only PLATFORM_DESKTOP)
setWindowMonitor                 ‚áê                         "SetWindowMonitor"                 _R‚ü®i‚ü©                                             # monitor                                                           # Set monitor for the current window
setWindowMinSize                 ‚áê                         "SetWindowMinSize"                 _R‚ü®i‚ãÑi‚ü©                                           # width height                                                      # Set window minimum dimensions (for FLAG_WINDOW_RESIZABLE)
setWindowMaxSize                 ‚áê                         "SetWindowMaxSize"                 _R‚ü®i‚ãÑi‚ü©                                           # width height                                                      # Set window maximum dimensions (for FLAG_WINDOW_RESIZABLE)
setWindowSize                    ‚áê                         "SetWindowSize"                    _R‚ü®i‚ãÑi‚ü©                                           # width height                                                      # Set window dimensions
setWindowOpacity                 ‚áê                         "SetWindowOpacity"                 _R‚ü®f‚ü©                                             # opacity                                                           # Set window opacity [0.0f..1.0f] (only PLATFORM_DESKTOP)
setWindowFocused                 ‚áê                         "SetWindowFocused"                 _R‚ü®‚ü©                                              #                                                                   # Set window focused (only PLATFORM_DESKTOP)
getWindowHandle                  ‚áê ptr                     "GetWindowHandle"                  _R‚ü®‚ü©                                              #                                                                   # Get native window handle
getScreenWidth                   ‚áê i                       "GetScreenWidth"                   _R‚ü®‚ü©                                              #                                                                   # Get current screen width
getScreenHeight                  ‚áê i                       "GetScreenHeight"                  _R‚ü®‚ü©                                              #                                                                   # Get current screen height
getRenderWidth                   ‚áê i                       "GetRenderWidth"                   _R‚ü®‚ü©                                              #                                                                   # Get current render width (it considers HiDPI)
getRenderHeight                  ‚áê i                       "GetRenderHeight"                  _R‚ü®‚ü©                                              #                                                                   # Get current render height (it considers HiDPI)
getMonitorCount                  ‚áê i                       "GetMonitorCount"                  _R‚ü®‚ü©                                              #                                                                   # Get number of connected monitors
getCurrentMonitor                ‚áê i                       "GetCurrentMonitor"                _R‚ü®‚ü©                                              #                                                                   # Get current connected monitor
getMonitorPosition               ‚áê v2                      "GetMonitorPosition"               _R‚ü®i‚ü©                                             # monitor                                                           # Get specified monitor position
getMonitorWidth                  ‚áê i                       "GetMonitorWidth"                  _R‚ü®i‚ü©                                             # monitor                                                           # Get specified monitor width (current video mode used by monitor)
getMonitorHeight                 ‚áê i                       "GetMonitorHeight"                 _R‚ü®i‚ü©                                             # monitor                                                           # Get specified monitor height (current video mode used by monitor)
getMonitorPhysicalWidth          ‚áê i                       "GetMonitorPhysicalWidth"          _R‚ü®i‚ü©                                             # monitor                                                           # Get specified monitor physical width in millimetres
getMonitorPhysicalHeight         ‚áê i                       "GetMonitorPhysicalHeight"         _R‚ü®i‚ü©                                             # monitor                                                           # Get specified monitor physical height in millimetres
getMonitorRefreshRate            ‚áê i                       "GetMonitorRefreshRate"            _R‚ü®i‚ü©                                             # monitor                                                           # Get specified monitor refresh rate
getWindowPosition                ‚áê v2                      "GetWindowPosition"                _R‚ü®‚ü©                                              #                                                                   # Get window position XY on monitor
getWindowScaleDPI                ‚áê v2                      "GetWindowScaleDPI"                _R‚ü®‚ü©                                              #                                                                   # Get window scale DPI factor
getMonitorName                   ‚áê (ptr‚ä£str)               "GetMonitorName"                   _R‚ü®i‚ü©                                             # monitor                                                           # Get the human-readable, UTF-8 encoded name of the specified monitor
setClipboardText                 ‚áê                         "SetClipboardText"                 _R‚ü®str‚ü©                                           # text                                                              # Set clipboard text content
getClipboardText                 ‚áê (ptr‚ä£str)               "GetClipboardText"                 _R‚ü®‚ü©                                              #                                                                   # Get clipboard text content
enableEventWaiting               ‚áê                         "EnableEventWaiting"               _R‚ü®‚ü©                                              #                                                                   # Enable waiting for events on EndDrawing(), no automatic event polling
disableEventWaiting              ‚áê                         "DisableEventWaiting"              _R‚ü®‚ü©                                              #                                                                   # Disable waiting for events on EndDrawing(), automatic events polling
showCursor                       ‚áê                         "ShowCursor"                       _R‚ü®‚ü©                                              #                                                                   # Shows cursor
hideCursor                       ‚áê                         "HideCursor"                       _R‚ü®‚ü©                                              #                                                                   # Hides cursor
isCursorHidden                   ‚áê bool                    "IsCursorHidden"                   _R‚ü®‚ü©                                              #                                                                   # Check if cursor is not visible
enableCursor                     ‚áê                         "EnableCursor"                     _R‚ü®‚ü©                                              #                                                                   # Enables cursor (unlock cursor)
disableCursor                    ‚áê                         "DisableCursor"                    _R‚ü®‚ü©                                              #                                                                   # Disables cursor (lock cursor)
isCursorOnScreen                 ‚áê bool                    "IsCursorOnScreen"                 _R‚ü®‚ü©                                              #                                                                   # Check if cursor is on the screen
clearBackground                  ‚áê                         "ClearBackground"                  _R‚ü®color‚ü©                                         # color                                                             # Set background color (framebuffer clear color)
beginDrawing                     ‚áê                         "BeginDrawing"                     _R‚ü®‚ü©                                              #                                                                   # Setup canvas (framebuffer) to start drawing
endDrawing                       ‚áê                         "EndDrawing"                       _R‚ü®‚ü©                                              #                                                                   # End canvas drawing and swap buffers (double buffering)
beginMode2D                      ‚áê                         "BeginMode2D"                      _R‚ü®camera2D‚ü©                                      # camera                                                            # Begin 2D mode with custom camera (2D)
endMode2D                        ‚áê                         "EndMode2D"                        _R‚ü®‚ü©                                              #                                                                   # Ends 2D mode with custom camera
beginMode3D                      ‚áê                         "BeginMode3D"                      _R‚ü®camera3D‚ü©                                      # camera                                                            # Begin 3D mode with custom camera (3D)
endMode3D                        ‚áê                         "EndMode3D"                        _R‚ü®‚ü©                                              #                                                                   # Ends 3D mode and returns to default 2D orthographic mode
beginTextureMode                 ‚áê                         "BeginTextureMode"                 _R‚ü®renderTexture2D‚ü©                               # target                                                            # Begin drawing to render texture
endTextureMode                   ‚áê                         "EndTextureMode"                   _R‚ü®‚ü©                                              #                                                                   # Ends drawing to render texture
beginShaderMode                  ‚áê                         "BeginShaderMode"                  _R‚ü®shader‚ü©                                        # shader                                                            # Begin custom shader drawing
endShaderMode                    ‚áê                         "EndShaderMode"                    _R‚ü®‚ü©                                              #                                                                   # End custom shader drawing (use default shader)
beginBlendMode                   ‚áê                         "BeginBlendMode"                   _R‚ü®i‚ü©                                             # mode                                                              # Begin blending mode (alpha, additive, multiplied, subtract, custom)
endBlendMode                     ‚áê                         "EndBlendMode"                     _R‚ü®‚ü©                                              #                                                                   # End blending mode (reset to default: alpha blending)
beginScissorMode                 ‚áê                         "BeginScissorMode"                 _R‚ü®i‚ãÑi‚ãÑi‚ãÑi‚ü©                                       # x y width height                                                  # Begin scissor mode (define screen area for following drawing)
endScissorMode                   ‚áê                         "EndScissorMode"                   _R‚ü®‚ü©                                              #                                                                   # End scissor mode
beginVrStereoMode                ‚áê                         "BeginVrStereoMode"                _R‚ü®vrStereoConfig‚ü©                                # config                                                            # Begin stereo rendering (requires VR simulator)
endVrStereoMode                  ‚áê                         "EndVrStereoMode"                  _R‚ü®‚ü©                                              #                                                                   # End stereo rendering (requires VR simulator)
loadVrStereoConfig               ‚áê vrStereoConfig          "LoadVrStereoConfig"               _R‚ü®vrDeviceInfo‚ü©                                  # device                                                            # Load VR stereo config for VR simulator device parameters
unloadVrStereoConfig             ‚áê                         "UnloadVrStereoConfig"             _R‚ü®vrStereoConfig‚ü©                                # config                                                            # Unload VR stereo config
loadShader                       ‚áê shader                  "LoadShader"                       _R‚ü®str‚ãÑstr‚ü©                                       # vsFileName fsFileName                                             # Load shader from files and bind default locations
loadShaderFromMemory             ‚áê shader                  "LoadShaderFromMemory"             _R‚ü®str‚ãÑstr‚ü©                                       # vsCode fsCode                                                     # Load shader from code strings and bind default locations
isShaderReady                    ‚áê bool                    "IsShaderReady"                    _R‚ü®shader‚ü©                                        # shader                                                            # Check if a shader is ready
getShaderLocation                ‚áê i                       "GetShaderLocation"                _R‚ü®shader‚ãÑstr‚ü©                                    # shader uniformName                                                # Get shader uniform location
getShaderLocationAttrib          ‚áê i                       "GetShaderLocationAttrib"          _R‚ü®shader‚ãÑstr‚ü©                                    # shader attribName                                                 # Get shader attribute location
setShaderValue                   ‚áê                         "SetShaderValue"                   _R‚ü®shader‚ãÑi‚ãÑptr‚ãÑi‚ü©                                # shader locIndex value uniformType                                 # Set shader uniform value
setShaderValueRaw                ‚áê                         "SetShaderValue"                   _R‚ü®shader‚ãÑi‚ãÑ"*i8"‚ãÑi‚ü©                              # shader locIndex value uniformType                                 # Set shader uniform value
setShaderValueV                  ‚áê                         "SetShaderValueV"                  _R‚ü®shader‚ãÑi‚ãÑptr‚ãÑi‚ãÑi‚ü©                              # shader locIndex value uniformType count                           # Set shader uniform value vector
setShaderValueVRaw               ‚áê                         "SetShaderValueV"                  _R‚ü®shader‚ãÑi‚ãÑ"*i8"‚ãÑi‚ãÑi‚ü©                            # shader locIndex value uniformType count                           # Set shader uniform value vector
setShaderValueMatrix             ‚áê                         "SetShaderValueMatrix"             _R‚ü®shader‚ãÑi‚ãÑmatrix‚ü©                               # shader locIndex mat                                               # Set shader uniform value (matrix 4x4)
setShaderValueTexture            ‚áê                         "SetShaderValueTexture"            _R‚ü®shader‚ãÑi‚ãÑtexture2D‚ü©                            # shader locIndex texture                                           # Set shader uniform value for texture (sampler2d)
unloadShader                     ‚áê                         "UnloadShader"                     _R‚ü®shader‚ü©                                        # shader                                                            # Unload shader from GPU memory (VRAM)
getMouseRay                      ‚áê ray                     "GetMouseRay"                      _R‚ü®v2‚ãÑcamera‚ü©                                     # mousePosition camera                                              # Get a ray trace from mouse position
getCameraMatrix                  ‚áê matrix                  "GetCameraMatrix"                  _R‚ü®camera‚ü©                                        # camera                                                            # Get camera transform matrix (view matrix)
getCameraMatrix2D                ‚áê matrix                  "GetCameraMatrix2D"                _R‚ü®camera2D‚ü©                                      # camera                                                            # Get camera 2d transform matrix
getWorldToScreen                 ‚áê v2                      "GetWorldToScreen"                 _R‚ü®v3‚ãÑcamera‚ü©                                     # position camera                                                   # Get the screen space position for a 3d world space position
getScreenToWorld2D               ‚áê v2                      "GetScreenToWorld2D"               _R‚ü®v2‚ãÑcamera2D‚ü©                                   # position camera                                                   # Get the world space position for a 2d camera screen space position
getWorldToScreenEx               ‚áê v2                      "GetWorldToScreenEx"               _R‚ü®v3‚ãÑcamera‚ãÑi‚ãÑi‚ü©                                 # position camera width height                                      # Get size position for a 3d world space position
getWorldToScreen2D               ‚áê v2                      "GetWorldToScreen2D"               _R‚ü®v2‚ãÑcamera2D‚ü©                                   # position camera                                                   # Get the screen space position for a 2d camera world space position
setTargetFPS                     ‚áê                         "SetTargetFPS"                     _R‚ü®i‚ü©                                             # fps                                                               # Set target FPS (maximum)
getFrameTime                     ‚áê f                       "GetFrameTime"                     _R‚ü®‚ü©                                              #                                                                   # Get time in seconds for last frame drawn (delta time)
getTime                          ‚áê "f64"                   "GetTime"                          _R‚ü®‚ü©                                              #                                                                   # Get elapsed time in seconds since InitWindow()
getFPS                           ‚áê i                       "GetFPS"                           _R‚ü®‚ü©                                              #                                                                   # Get current FPS
swapScreenBuffer                 ‚áê                         "SwapScreenBuffer"                 _R‚ü®‚ü©                                              #                                                                   # Swap back buffer with front buffer (screen drawing)
pollInputEvents                  ‚áê                         "PollInputEvents"                  _R‚ü®‚ü©                                              #                                                                   # Register all input events
waitTime                         ‚áê                         "WaitTime"                         _R‚ü®"f64"‚ü©                                         # seconds                                                           # Wait for some time (halt program execution)
setRandomSeed                    ‚áê                         "SetRandomSeed"                    _R‚ü®u‚ü©                                             # seed                                                              # Set the seed for the random number generator
getRandomValue                   ‚áê i                       "GetRandomValue"                   _R‚ü®i‚ãÑi‚ü©                                           # min max                                                           # Get a random value between min and max (both included)
loadRandomSequence               ‚áê (ptr‚ä£"*"‚àæi)             "LoadRandomSequence"               _R‚ü®u‚ãÑi‚ãÑi‚ü©                                         # count min max                                                     # Load random values sequence, no values repeated
unloadRandomSequence             ‚áê                         "UnloadRandomSequence"             _R‚ü®"*"‚àæi‚ü©                                         # sequence                                                          # Unload random values sequence
unloadRandomSequenceRef          ‚áê                         "UnloadRandomSequence"             _R‚ü®"&"‚àæi‚ü©                                         # sequence                                                          # Unload random values sequence
takeScreenshot                   ‚áê                         "TakeScreenshot"                   _R‚ü®str‚ü©                                           # fileName                                                          # Takes a screenshot of current screen (filename extension defines format)
setConfigFlags                   ‚áê                         "SetConfigFlags"                   _R‚ü®u‚ü©                                             # flags                                                             # Setup init configuration flags (view FLAGS)
openURL                          ‚áê                         "OpenURL"                          _R‚ü®str‚ü©                                           # url                                                               # Open URL with default system browser (if available)
traceLog                         ‚áê                         "TraceLog"                         _R‚ü®i‚ãÑstr‚ãÑptr‚ü©                                     # logLevel text args                                                # Show trace log messages (LOG_DEBUG, LOG_INFO, LOG_WARNING, LOG_ERROR...)
setTraceLogLevel                 ‚áê                         "SetTraceLogLevel"                 _R‚ü®i‚ü©                                             # logLevel                                                          # Set the current threshold (minimum) log level
memAlloc                         ‚áê ptr                     "MemAlloc"                         _R‚ü®u‚ü©                                             # size                                                              # Internal memory allocator
memRealloc                       ‚áê ptr                     "MemRealloc"                       _R‚ü®ptr‚ãÑu‚ü©                                         # ptr size                                                          # Internal memory reallocator
memReallocRef                    ‚áê ptr                     "MemRealloc"                       _R‚ü®"&u8"‚ãÑu‚ü©                                       # ptr size                                                          # Internal memory reallocator
memFree                          ‚áê                         "MemFree"                          _R‚ü®ptr‚ü©                                           # ptr                                                               # Internal memory free
memFreeRef                       ‚áê                         "MemFree"                          _R‚ü®"&u8"‚ü©                                         # ptr                                                               # Internal memory free
setTraceLogCallback              ‚áê                         "SetTraceLogCallback"              _R‚ü®ptr‚ü©                                           # callback                                                          # Set custom trace log
setLoadFileDataCallback          ‚áê                         "SetLoadFileDataCallback"          _R‚ü®ptr‚ü©                                           # callback                                                          # Set custom file binary data loader
setSaveFileDataCallback          ‚áê                         "SetSaveFileDataCallback"          _R‚ü®ptr‚ü©                                           # callback                                                          # Set custom file binary data saver
setLoadFileTextCallback          ‚áê                         "SetLoadFileTextCallback"          _R‚ü®ptr‚ü©                                           # callback                                                          # Set custom file text data loader
setSaveFileTextCallback          ‚áê                         "SetSaveFileTextCallback"          _R‚ü®ptr‚ü©                                           # callback                                                          # Set custom file text data saver
loadFileData                     ‚áê (ptr‚ä£ustr)              "LoadFileData"                     _R‚ü®str‚ãÑ"*"‚àæi‚ü©                                     # fileName dataSize                                                 # Load file data as byte array (read)
loadFileDataRef                  ‚áê (ptr‚ä£ustr)              "LoadFileData"                     _R‚ü®str‚ãÑ"&"‚àæi‚ü©                                     # fileName dataSize                                                 # Load file data as byte array (read)
unloadFileData                   ‚áê                         "UnloadFileData"                   _R‚ü®ustr‚ü©                                          # data                                                              # Unload file data allocated by LoadFileData()
unloadFileDataRef                ‚áê                         "UnloadFileData"                   _R‚ü®"&u8"‚ü©                                         # data                                                              # Unload file data allocated by LoadFileData()
saveFileData                     ‚áê bool                    "SaveFileData"                     _R‚ü®str‚ãÑptr‚ãÑi‚ü©                                     # fileName data dataSize                                            # Save data to file from byte array (write), returns true on success
saveFileDataRef                  ‚áê bool                    "SaveFileData"                     _R‚ü®str‚ãÑ"&u8"‚ãÑi‚ü©                                   # fileName data dataSize                                            # Save data to file from byte array (write), returns true on success
exportDataAsCode                 ‚áê bool                    "ExportDataAsCode"                 _R‚ü®ustr‚ãÑi‚ãÑstr‚ü©                                    # data dataSize fileName                                            # Export data to code (.h), returns true on success
loadFileText                     ‚áê (ptr‚ä£str)               "LoadFileText"                     _R‚ü®str‚ü©                                           # fileName                                                          # Load text data from file (read), returns a '\0' terminated string
unloadFileText                   ‚áê                         "UnloadFileText"                   _R‚ü®str‚ü©                                           # text                                                              # Unload file text data allocated by LoadFileText()
unloadFileTextRef                ‚áê                         "UnloadFileText"                   _R‚ü®"&u8:c8"‚ü©                                      # text                                                              # Unload file text data allocated by LoadFileText()
saveFileText                     ‚áê bool                    "SaveFileText"                     _R‚ü®str‚ãÑstr‚ü©                                       # fileName text                                                     # Save text data to file (write), string must be '\0' terminated, returns true on success
saveFileTextRef                  ‚áê bool                    "SaveFileText"                     _R‚ü®str‚ãÑ"&u8:c8"‚ü©                                  # fileName text                                                     # Save text data to file (write), string must be '\0' terminated, returns true on success
fileExists                       ‚áê bool                    "FileExists"                       _R‚ü®str‚ü©                                           # fileName                                                          # Check if file exists
directoryExists                  ‚áê bool                    "DirectoryExists"                  _R‚ü®str‚ü©                                           # dirPath                                                           # Check if a directory path exists
isFileExtension                  ‚áê bool                    "IsFileExtension"                  _R‚ü®str‚ãÑstr‚ü©                                       # fileName ext                                                      # Check file extension (including point: .png, .wav)
getFileLength                    ‚áê i                       "GetFileLength"                    _R‚ü®str‚ü©                                           # fileName                                                          # Get file length in bytes (NOTE: GetFileSize() conflicts with windows.h)
getFileExtension                 ‚áê (ptr‚ä£str)               "GetFileExtension"                 _R‚ü®str‚ü©                                           # fileName                                                          # Get pointer to extension for a filename string (includes dot: '.png')
getFileName                      ‚áê (ptr‚ä£str)               "GetFileName"                      _R‚ü®str‚ü©                                           # filePath                                                          # Get pointer to filename for a path string
getFileNameWithoutExt            ‚áê (ptr‚ä£str)               "GetFileNameWithoutExt"            _R‚ü®str‚ü©                                           # filePath                                                          # Get filename string without extension (uses static string)
getDirectoryPath                 ‚áê (ptr‚ä£str)               "GetDirectoryPath"                 _R‚ü®str‚ü©                                           # filePath                                                          # Get full path for a given fileName with path (uses static string)
getPrevDirectoryPath             ‚áê (ptr‚ä£str)               "GetPrevDirectoryPath"             _R‚ü®str‚ü©                                           # dirPath                                                           # Get previous directory path for a given path (uses static string)
getWorkingDirectory              ‚áê (ptr‚ä£str)               "GetWorkingDirectory"              _R‚ü®‚ü©                                              #                                                                   # Get current working directory (uses static string)
getApplicationDirectory          ‚áê (ptr‚ä£str)               "GetApplicationDirectory"          _R‚ü®‚ü©                                              #                                                                   # Get the directory of the running application (uses static string)
changeDirectory                  ‚áê bool                    "ChangeDirectory"                  _R‚ü®str‚ü©                                           # dir                                                               # Change working directory, return true on success
isPathFile                       ‚áê bool                    "IsPathFile"                       _R‚ü®str‚ü©                                           # path                                                              # Check if a given path is a file or a directory
loadDirectoryFiles               ‚áê filePathList            "LoadDirectoryFiles"               _R‚ü®str‚ü©                                           # dirPath                                                           # Load directory filepaths
loadDirectoryFilesEx             ‚áê filePathList            "LoadDirectoryFilesEx"             _R‚ü®str‚ãÑstr‚ãÑbool‚ü©                                  # basePath filter scanSubdirs                                       # Load directory filepaths with extension filtering and recursive directory scan
unloadDirectoryFiles             ‚áê                         "UnloadDirectoryFiles"             _R‚ü®filePathList‚ü©                                  # files                                                             # Unload filepaths
isFileDropped                    ‚áê bool                    "IsFileDropped"                    _R‚ü®‚ü©                                              #                                                                   # Check if a file has been dropped into window
loadDroppedFiles                 ‚áê filePathList            "LoadDroppedFiles"                 _R‚ü®‚ü©                                              #                                                                   # Load dropped filepaths
unloadDroppedFiles               ‚áê                         "UnloadDroppedFiles"               _R‚ü®filePathList‚ü©                                  # files                                                             # Unload dropped filepaths
getFileModTime                   ‚áê "i64"                   "GetFileModTime"                   _R‚ü®str‚ü©                                           # fileName                                                          # Get file modification time (last write time)
compressData                     ‚áê (ptr‚ä£ustr)              "CompressData"                     _R‚ü®ustr‚ãÑi‚ãÑ"*"‚àæi‚ü©                                  # data dataSize compDataSize                                        # Compress data (DEFLATE algorithm), memory must be MemFree()
compressDataRef                  ‚áê (ptr‚ä£ustr)              "CompressData"                     _R‚ü®ustr‚ãÑi‚ãÑ"&"‚àæi‚ü©                                  # data dataSize compDataSize                                        # Compress data (DEFLATE algorithm), memory must be MemFree()
decompressData                   ‚áê (ptr‚ä£ustr)              "DecompressData"                   _R‚ü®ustr‚ãÑi‚ãÑ"*"‚àæi‚ü©                                  # compData compDataSize dataSize                                    # Decompress data (DEFLATE algorithm), memory must be MemFree()
decompressDataRef                ‚áê (ptr‚ä£ustr)              "DecompressData"                   _R‚ü®ustr‚ãÑi‚ãÑ"&"‚àæi‚ü©                                  # compData compDataSize dataSize                                    # Decompress data (DEFLATE algorithm), memory must be MemFree()
encodeDataBase64                 ‚áê (ptr‚ä£str)               "EncodeDataBase64"                 _R‚ü®ustr‚ãÑi‚ãÑ"*"‚àæi‚ü©                                  # data dataSize outputSize                                          # Encode data to Base64 string, memory must be MemFree()
encodeDataBase64Ref              ‚áê (ptr‚ä£str)               "EncodeDataBase64"                 _R‚ü®ustr‚ãÑi‚ãÑ"&"‚àæi‚ü©                                  # data dataSize outputSize                                          # Encode data to Base64 string, memory must be MemFree()
decodeDataBase64                 ‚áê (ptr‚ä£ustr)              "DecodeDataBase64"                 _R‚ü®ustr‚ãÑ"*"‚àæi‚ü©                                    # data outputSize                                                   # Decode Base64 string data, memory must be MemFree()
decodeDataBase64Ref              ‚áê (ptr‚ä£ustr)              "DecodeDataBase64"                 _R‚ü®ustr‚ãÑ"&"‚àæi‚ü©                                    # data outputSize                                                   # Decode Base64 string data, memory must be MemFree()
loadAutomationEventList          ‚áê automationEventList     "LoadAutomationEventList"          _R‚ü®str‚ü©                                           # fileName                                                          # Load automation events list from file, NULL for empty list, capacity = MAX_AUTOMATION_EVENTS
unloadAutomationEventList        ‚áê                         "UnloadAutomationEventList"        _R‚ü®"*"‚àæautomationEventList‚ü©                       # list                                                              # Unload automation events list from file
unloadAutomationEventListRef     ‚áê                         "UnloadAutomationEventList"        _R‚ü®"&"‚àæautomationEventList‚ü©                       # list                                                              # Unload automation events list from file
exportAutomationEventList        ‚áê bool                    "ExportAutomationEventList"        _R‚ü®automationEventList‚ãÑstr‚ü©                       # list fileName                                                     # Export automation events list as text file
setAutomationEventList           ‚áê                         "SetAutomationEventList"           _R‚ü®"*"‚àæautomationEventList‚ü©                       # list                                                              # Set automation event list to record to
setAutomationEventListRef        ‚áê                         "SetAutomationEventList"           _R‚ü®"&"‚àæautomationEventList‚ü©                       # list                                                              # Set automation event list to record to
setAutomationEventBaseFrame      ‚áê                         "SetAutomationEventBaseFrame"      _R‚ü®i‚ü©                                             # frame                                                             # Set automation event internal base frame to start recording
startAutomationEventRecording    ‚áê                         "StartAutomationEventRecording"    _R‚ü®‚ü©                                              #                                                                   # Start recording automation events (AutomationEventList must be set)
stopAutomationEventRecording     ‚áê                         "StopAutomationEventRecording"     _R‚ü®‚ü©                                              #                                                                   # Stop recording automation events
playAutomationEvent              ‚áê                         "PlayAutomationEvent"              _R‚ü®automationEvent‚ü©                               # event                                                             # Play a recorded automation event
isKeyPressed                     ‚áê bool                    "IsKeyPressed"                     _R‚ü®i‚ü©                                             # key                                                               # Check if a key has been pressed once
isKeyPressedRepeat               ‚áê bool                    "IsKeyPressedRepeat"               _R‚ü®i‚ü©                                             # key                                                               # Check if a key has been pressed again (Only PLATFORM_DESKTOP)
isKeyDown                        ‚áê bool                    "IsKeyDown"                        _R‚ü®i‚ü©                                             # key                                                               # Check if a key is being pressed
isKeyReleased                    ‚áê bool                    "IsKeyReleased"                    _R‚ü®i‚ü©                                             # key                                                               # Check if a key has been released once
isKeyUp                          ‚áê bool                    "IsKeyUp"                          _R‚ü®i‚ü©                                             # key                                                               # Check if a key is NOT being pressed
getKeyPressed                    ‚áê i                       "GetKeyPressed"                    _R‚ü®‚ü©                                              #                                                                   # Get key pressed (keycode), call it multiple times for keys queued, returns 0 when the queue is empty
getCharPressed                   ‚áê i                       "GetCharPressed"                   _R‚ü®‚ü©                                              #                                                                   # Get char pressed (unicode), call it multiple times for chars queued, returns 0 when the queue is empty
setExitKey                       ‚áê                         "SetExitKey"                       _R‚ü®i‚ü©                                             # key                                                               # Set a custom key to exit program (default is ESC)
isGamepadAvailable               ‚áê bool                    "IsGamepadAvailable"               _R‚ü®i‚ü©                                             # gamepad                                                           # Check if a gamepad is available
getGamepadName                   ‚áê (ptr‚ä£str)               "GetGamepadName"                   _R‚ü®i‚ü©                                             # gamepad                                                           # Get gamepad internal name id
isGamepadButtonPressed           ‚áê bool                    "IsGamepadButtonPressed"           _R‚ü®i‚ãÑi‚ü©                                           # gamepad button                                                    # Check if a gamepad button has been pressed once
isGamepadButtonDown              ‚áê bool                    "IsGamepadButtonDown"              _R‚ü®i‚ãÑi‚ü©                                           # gamepad button                                                    # Check if a gamepad button is being pressed
isGamepadButtonReleased          ‚áê bool                    "IsGamepadButtonReleased"          _R‚ü®i‚ãÑi‚ü©                                           # gamepad button                                                    # Check if a gamepad button has been released once
isGamepadButtonUp                ‚áê bool                    "IsGamepadButtonUp"                _R‚ü®i‚ãÑi‚ü©                                           # gamepad button                                                    # Check if a gamepad button is NOT being pressed
getGamepadButtonPressed          ‚áê i                       "GetGamepadButtonPressed"          _R‚ü®‚ü©                                              #                                                                   # Get the last gamepad button pressed
getGamepadAxisCount              ‚áê i                       "GetGamepadAxisCount"              _R‚ü®i‚ü©                                             # gamepad                                                           # Get gamepad axis count for a gamepad
getGamepadAxisMovement           ‚áê f                       "GetGamepadAxisMovement"           _R‚ü®i‚ãÑi‚ü©                                           # gamepad axis                                                      # Get axis movement value for a gamepad axis
setGamepadMappings               ‚áê i                       "SetGamepadMappings"               _R‚ü®str‚ü©                                           # mappings                                                          # Set internal gamepad mappings (SDL_GameControllerDB)
isMouseButtonPressed             ‚áê bool                    "IsMouseButtonPressed"             _R‚ü®i‚ü©                                             # button                                                            # Check if a mouse button has been pressed once
isMouseButtonDown                ‚áê bool                    "IsMouseButtonDown"                _R‚ü®i‚ü©                                             # button                                                            # Check if a mouse button is being pressed
isMouseButtonReleased            ‚áê bool                    "IsMouseButtonReleased"            _R‚ü®i‚ü©                                             # button                                                            # Check if a mouse button has been released once
isMouseButtonUp                  ‚áê bool                    "IsMouseButtonUp"                  _R‚ü®i‚ü©                                             # button                                                            # Check if a mouse button is NOT being pressed
getMouseX                        ‚áê i                       "GetMouseX"                        _R‚ü®‚ü©                                              #                                                                   # Get mouse position X
getMouseY                        ‚áê i                       "GetMouseY"                        _R‚ü®‚ü©                                              #                                                                   # Get mouse position Y
getMousePosition                 ‚áê v2                      "GetMousePosition"                 _R‚ü®‚ü©                                              #                                                                   # Get mouse position XY
getMouseDelta                    ‚áê v2                      "GetMouseDelta"                    _R‚ü®‚ü©                                              #                                                                   # Get mouse delta between frames
setMousePosition                 ‚áê                         "SetMousePosition"                 _R‚ü®i‚ãÑi‚ü©                                           # x y                                                               # Set mouse position XY
setMouseOffset                   ‚áê                         "SetMouseOffset"                   _R‚ü®i‚ãÑi‚ü©                                           # offsetX offsetY                                                   # Set mouse offset
setMouseScale                    ‚áê                         "SetMouseScale"                    _R‚ü®f‚ãÑf‚ü©                                           # scaleX scaleY                                                     # Set mouse scaling
getMouseWheelMove                ‚áê f                       "GetMouseWheelMove"                _R‚ü®‚ü©                                              #                                                                   # Get mouse wheel movement for X or Y, whichever is larger
getMouseWheelMoveV               ‚áê v2                      "GetMouseWheelMoveV"               _R‚ü®‚ü©                                              #                                                                   # Get mouse wheel movement for both X and Y
setMouseCursor                   ‚áê                         "SetMouseCursor"                   _R‚ü®i‚ü©                                             # cursor                                                            # Set mouse cursor
getTouchX                        ‚áê i                       "GetTouchX"                        _R‚ü®‚ü©                                              #                                                                   # Get touch position X for touch point 0 (relative to screen size)
getTouchY                        ‚áê i                       "GetTouchY"                        _R‚ü®‚ü©                                              #                                                                   # Get touch position Y for touch point 0 (relative to screen size)
getTouchPosition                 ‚áê v2                      "GetTouchPosition"                 _R‚ü®i‚ü©                                             # index                                                             # Get touch position XY for a touch point index (relative to screen size)
getTouchPointId                  ‚áê i                       "GetTouchPointId"                  _R‚ü®i‚ü©                                             # index                                                             # Get touch point identifier for given index
getTouchPointCount               ‚áê i                       "GetTouchPointCount"               _R‚ü®‚ü©                                              #                                                                   # Get number of touch points
setGesturesEnabled               ‚áê                         "SetGesturesEnabled"               _R‚ü®u‚ü©                                             # flags                                                             # Enable a set of gestures using flags
isGestureDetected                ‚áê bool                    "IsGestureDetected"                _R‚ü®u‚ü©                                             # gesture                                                           # Check if a gesture have been detected
getGestureDetected               ‚áê i                       "GetGestureDetected"               _R‚ü®‚ü©                                              #                                                                   # Get latest detected gesture
getGestureHoldDuration           ‚áê f                       "GetGestureHoldDuration"           _R‚ü®‚ü©                                              #                                                                   # Get gesture hold time in milliseconds
getGestureDragVector             ‚áê v2                      "GetGestureDragVector"             _R‚ü®‚ü©                                              #                                                                   # Get gesture drag vector
getGestureDragAngle              ‚áê f                       "GetGestureDragAngle"              _R‚ü®‚ü©                                              #                                                                   # Get gesture drag angle
getGesturePinchVector            ‚áê v2                      "GetGesturePinchVector"            _R‚ü®‚ü©                                              #                                                                   # Get gesture pinch delta
getGesturePinchAngle             ‚áê f                       "GetGesturePinchAngle"             _R‚ü®‚ü©                                              #                                                                   # Get gesture pinch angle
updateCamera                     ‚áê                         "UpdateCamera"                     _R‚ü®"*"‚àæcamera‚ãÑi‚ü©                                  # camera mode                                                       # Update camera position for selected mode
updateCameraRef                  ‚áê                         "UpdateCamera"                     _R‚ü®"&"‚àæcamera‚ãÑi‚ü©                                  # camera mode                                                       # Update camera position for selected mode
updateCameraPro                  ‚áê                         "UpdateCameraPro"                  _R‚ü®"*"‚àæcamera‚ãÑv3‚ãÑv3‚ãÑf‚ü©                            # camera movement rotation zoom                                     # Update camera movement/rotation
updateCameraProRef               ‚áê                         "UpdateCameraPro"                  _R‚ü®"&"‚àæcamera‚ãÑv3‚ãÑv3‚ãÑf‚ü©                            # camera movement rotation zoom                                     # Update camera movement/rotation
setShapesTexture                 ‚áê                         "SetShapesTexture"                 _R‚ü®texture2D‚ãÑrectangle‚ü©                           # texture source                                                    # Set texture and rectangle to be used on shapes drawing
drawPixel                        ‚áê                         "DrawPixel"                        _R‚ü®i‚ãÑi‚ãÑcolor‚ü©                                     # posX posY color                                                   # Draw a pixel
drawPixelV                       ‚áê                         "DrawPixelV"                       _R‚ü®v2‚ãÑcolor‚ü©                                      # position color                                                    # Draw a pixel (Vector version)
drawLine                         ‚áê                         "DrawLine"                         _R‚ü®i‚ãÑi‚ãÑi‚ãÑi‚ãÑcolor‚ü©                                 # startPosX startPosY endPosX endPosY color                         # Draw a line
drawLineV                        ‚áê                         "DrawLineV"                        _R‚ü®v2‚ãÑv2‚ãÑcolor‚ü©                                   # startPos endPos color                                             # Draw a line (using gl lines)
drawLineEx                       ‚áê                         "DrawLineEx"                       _R‚ü®v2‚ãÑv2‚ãÑf‚ãÑcolor‚ü©                                 # startPos endPos thick color                                       # Draw a line (using triangles/quads)
drawLineStrip                    ‚áê                         "DrawLineStrip"                    _R‚ü®"*"‚àæv2‚ãÑi‚ãÑcolor‚ü©                                # points pointCount color                                           # Draw lines sequence (using gl lines)
drawLineStripRef                 ‚áê                         "DrawLineStrip"                    _R‚ü®"&"‚àæv2‚ãÑi‚ãÑcolor‚ü©                                # points pointCount color                                           # Draw lines sequence (using gl lines)
drawLineBezier                   ‚áê                         "DrawLineBezier"                   _R‚ü®v2‚ãÑv2‚ãÑf‚ãÑcolor‚ü©                                 # startPos endPos thick color                                       # Draw line segment cubic-bezier in-out interpolation
drawCircle                       ‚áê                         "DrawCircle"                       _R‚ü®i‚ãÑi‚ãÑf‚ãÑcolor‚ü©                                   # centerX centerY radius color                                      # Draw a color-filled circle
drawCircleSector                 ‚áê                         "DrawCircleSector"                 _R‚ü®v2‚ãÑf‚ãÑf‚ãÑf‚ãÑi‚ãÑcolor‚ü©                              # center radius startAngle endAngle segments color                  # Draw a piece of a circle
drawCircleSectorLines            ‚áê                         "DrawCircleSectorLines"            _R‚ü®v2‚ãÑf‚ãÑf‚ãÑf‚ãÑi‚ãÑcolor‚ü©                              # center radius startAngle endAngle segments color                  # Draw circle sector outline
drawCircleGradient               ‚áê                         "DrawCircleGradient"               _R‚ü®i‚ãÑi‚ãÑf‚ãÑcolor‚ãÑcolor‚ü©                             # centerX centerY radius color1 color2                              # Draw a gradient-filled circle
drawCircleV                      ‚áê                         "DrawCircleV"                      _R‚ü®v2‚ãÑf‚ãÑcolor‚ü©                                    # center radius color                                               # Draw a color-filled circle (Vector version)
drawCircleLines                  ‚áê                         "DrawCircleLines"                  _R‚ü®i‚ãÑi‚ãÑf‚ãÑcolor‚ü©                                   # centerX centerY radius color                                      # Draw circle outline
drawCircleLinesV                 ‚áê                         "DrawCircleLinesV"                 _R‚ü®v2‚ãÑf‚ãÑcolor‚ü©                                    # center radius color                                               # Draw circle outline (Vector version)
drawEllipse                      ‚áê                         "DrawEllipse"                      _R‚ü®i‚ãÑi‚ãÑf‚ãÑf‚ãÑcolor‚ü©                                 # centerX centerY radiusH radiusV color                             # Draw ellipse
drawEllipseLines                 ‚áê                         "DrawEllipseLines"                 _R‚ü®i‚ãÑi‚ãÑf‚ãÑf‚ãÑcolor‚ü©                                 # centerX centerY radiusH radiusV color                             # Draw ellipse outline
drawRing                         ‚áê                         "DrawRing"                         _R‚ü®v2‚ãÑf‚ãÑf‚ãÑf‚ãÑf‚ãÑi‚ãÑcolor‚ü©                            # center innerRadius outerRadius startAngle endAngle segments color # Draw ring
drawRingLines                    ‚áê                         "DrawRingLines"                    _R‚ü®v2‚ãÑf‚ãÑf‚ãÑf‚ãÑf‚ãÑi‚ãÑcolor‚ü©                            # center innerRadius outerRadius startAngle endAngle segments color # Draw ring outline
drawRectangle                    ‚áê                         "DrawRectangle"                    _R‚ü®i‚ãÑi‚ãÑi‚ãÑi‚ãÑcolor‚ü©                                 # posX posY width height color                                      # Draw a color-filled rectangle
drawRectangleV                   ‚áê                         "DrawRectangleV"                   _R‚ü®v2‚ãÑv2‚ãÑcolor‚ü©                                   # position size color                                               # Draw a color-filled rectangle (Vector version)
drawRectangleRec                 ‚áê                         "DrawRectangleRec"                 _R‚ü®rectangle‚ãÑcolor‚ü©                               # rec color                                                         # Draw a color-filled rectangle
drawRectanglePro                 ‚áê                         "DrawRectanglePro"                 _R‚ü®rectangle‚ãÑv2‚ãÑf‚ãÑcolor‚ü©                          # rec origin rotation color                                         # Draw a color-filled rectangle with pro parameters
drawRectangleGradientV           ‚áê                         "DrawRectangleGradientV"           _R‚ü®i‚ãÑi‚ãÑi‚ãÑi‚ãÑcolor‚ãÑcolor‚ü©                           # posX posY width height color1 color2                              # Draw a vertical-gradient-filled rectangle
drawRectangleGradientH           ‚áê                         "DrawRectangleGradientH"           _R‚ü®i‚ãÑi‚ãÑi‚ãÑi‚ãÑcolor‚ãÑcolor‚ü©                           # posX posY width height color1 color2                              # Draw a horizontal-gradient-filled rectangle
drawRectangleGradientEx          ‚áê                         "DrawRectangleGradientEx"          _R‚ü®rectangle‚ãÑcolor‚ãÑcolor‚ãÑcolor‚ãÑcolor‚ü©             # rec col1 col2 col3 col4                                           # Draw a gradient-filled rectangle with custom vertex colors
drawRectangleLines               ‚áê                         "DrawRectangleLines"               _R‚ü®i‚ãÑi‚ãÑi‚ãÑi‚ãÑcolor‚ü©                                 # posX posY width height color                                      # Draw rectangle outline
drawRectangleLinesEx             ‚áê                         "DrawRectangleLinesEx"             _R‚ü®rectangle‚ãÑf‚ãÑcolor‚ü©                             # rec lineThick color                                               # Draw rectangle outline with extended parameters
drawRectangleRounded             ‚áê                         "DrawRectangleRounded"             _R‚ü®rectangle‚ãÑf‚ãÑi‚ãÑcolor‚ü©                           # rec roundness segments color                                      # Draw rectangle with rounded edges
drawRectangleRoundedLines        ‚áê                         "DrawRectangleRoundedLines"        _R‚ü®rectangle‚ãÑf‚ãÑi‚ãÑf‚ãÑcolor‚ü©                         # rec roundness segments lineThick color                            # Draw rectangle with rounded edges outline
drawTriangle                     ‚áê                         "DrawTriangle"                     _R‚ü®v2‚ãÑv2‚ãÑv2‚ãÑcolor‚ü©                                # v1 v2 v3 color                                                    # Draw a color-filled triangle (vertex in counter-clockwise order!)
drawTriangleLines                ‚áê                         "DrawTriangleLines"                _R‚ü®v2‚ãÑv2‚ãÑv2‚ãÑcolor‚ü©                                # v1 v2 v3 color                                                    # Draw triangle outline (vertex in counter-clockwise order!)
drawTriangleFan                  ‚áê                         "DrawTriangleFan"                  _R‚ü®"*"‚àæv2‚ãÑi‚ãÑcolor‚ü©                                # points pointCount color                                           # Draw a triangle fan defined by points (first vertex is the center)
drawTriangleFanRef               ‚áê                         "DrawTriangleFan"                  _R‚ü®"&"‚àæv2‚ãÑi‚ãÑcolor‚ü©                                # points pointCount color                                           # Draw a triangle fan defined by points (first vertex is the center)
drawTriangleStrip                ‚áê                         "DrawTriangleStrip"                _R‚ü®"*"‚àæv2‚ãÑi‚ãÑcolor‚ü©                                # points pointCount color                                           # Draw a triangle strip defined by points
drawTriangleStripRef             ‚áê                         "DrawTriangleStrip"                _R‚ü®"&"‚àæv2‚ãÑi‚ãÑcolor‚ü©                                # points pointCount color                                           # Draw a triangle strip defined by points
drawPoly                         ‚áê                         "DrawPoly"                         _R‚ü®v2‚ãÑi‚ãÑf‚ãÑf‚ãÑcolor‚ü©                                # center sides radius rotation color                                # Draw a regular polygon (Vector version)
drawPolyLines                    ‚áê                         "DrawPolyLines"                    _R‚ü®v2‚ãÑi‚ãÑf‚ãÑf‚ãÑcolor‚ü©                                # center sides radius rotation color                                # Draw a polygon outline of n sides
drawPolyLinesEx                  ‚áê                         "DrawPolyLinesEx"                  _R‚ü®v2‚ãÑi‚ãÑf‚ãÑf‚ãÑf‚ãÑcolor‚ü©                              # center sides radius rotation lineThick color                      # Draw a polygon outline of n sides with extended parameters
drawSplineLinear                 ‚áê                         "DrawSplineLinear"                 _R‚ü®"*"‚àæv2‚ãÑi‚ãÑf‚ãÑcolor‚ü©                              # points pointCount thick color                                     # Draw spline: Linear, minimum 2 points
drawSplineLinearRef              ‚áê                         "DrawSplineLinear"                 _R‚ü®"&"‚àæv2‚ãÑi‚ãÑf‚ãÑcolor‚ü©                              # points pointCount thick color                                     # Draw spline: Linear, minimum 2 points
drawSplineBasis                  ‚áê                         "DrawSplineBasis"                  _R‚ü®"*"‚àæv2‚ãÑi‚ãÑf‚ãÑcolor‚ü©                              # points pointCount thick color                                     # Draw spline: B-Spline, minimum 4 points
drawSplineBasisRef               ‚áê                         "DrawSplineBasis"                  _R‚ü®"&"‚àæv2‚ãÑi‚ãÑf‚ãÑcolor‚ü©                              # points pointCount thick color                                     # Draw spline: B-Spline, minimum 4 points
drawSplineCatmullRom             ‚áê                         "DrawSplineCatmullRom"             _R‚ü®"*"‚àæv2‚ãÑi‚ãÑf‚ãÑcolor‚ü©                              # points pointCount thick color                                     # Draw spline: Catmull-Rom, minimum 4 points
drawSplineCatmullRomRef          ‚áê                         "DrawSplineCatmullRom"             _R‚ü®"&"‚àæv2‚ãÑi‚ãÑf‚ãÑcolor‚ü©                              # points pointCount thick color                                     # Draw spline: Catmull-Rom, minimum 4 points
drawSplineBezierQuadratic        ‚áê                         "DrawSplineBezierQuadratic"        _R‚ü®"*"‚àæv2‚ãÑi‚ãÑf‚ãÑcolor‚ü©                              # points pointCount thick color                                     # Draw spline: Quadratic Bezier, minimum 3 points (1 control point): [p1, c2, p3, c4...]
drawSplineBezierQuadraticRef     ‚áê                         "DrawSplineBezierQuadratic"        _R‚ü®"&"‚àæv2‚ãÑi‚ãÑf‚ãÑcolor‚ü©                              # points pointCount thick color                                     # Draw spline: Quadratic Bezier, minimum 3 points (1 control point): [p1, c2, p3, c4...]
drawSplineBezierCubic            ‚áê                         "DrawSplineBezierCubic"            _R‚ü®"*"‚àæv2‚ãÑi‚ãÑf‚ãÑcolor‚ü©                              # points pointCount thick color                                     # Draw spline: Cubic Bezier, minimum 4 points (2 control points): [p1, c2, c3, p4, c5, c6...]
drawSplineBezierCubicRef         ‚áê                         "DrawSplineBezierCubic"            _R‚ü®"&"‚àæv2‚ãÑi‚ãÑf‚ãÑcolor‚ü©                              # points pointCount thick color                                     # Draw spline: Cubic Bezier, minimum 4 points (2 control points): [p1, c2, c3, p4, c5, c6...]
drawSplineSegmentLinear          ‚áê                         "DrawSplineSegmentLinear"          _R‚ü®v2‚ãÑv2‚ãÑf‚ãÑcolor‚ü©                                 # p1 p2 thick color                                                 # Draw spline segment: Linear, 2 points
drawSplineSegmentBasis           ‚áê                         "DrawSplineSegmentBasis"           _R‚ü®v2‚ãÑv2‚ãÑv2‚ãÑv2‚ãÑf‚ãÑcolor‚ü©                           # p1 p2 p3 p4 thick color                                           # Draw spline segment: B-Spline, 4 points
drawSplineSegmentCatmullRom      ‚áê                         "DrawSplineSegmentCatmullRom"      _R‚ü®v2‚ãÑv2‚ãÑv2‚ãÑv2‚ãÑf‚ãÑcolor‚ü©                           # p1 p2 p3 p4 thick color                                           # Draw spline segment: Catmull-Rom, 4 points
drawSplineSegmentBezierQuadratic ‚áê                         "DrawSplineSegmentBezierQuadratic" _R‚ü®v2‚ãÑv2‚ãÑv2‚ãÑf‚ãÑcolor‚ü©                              # p1 c2 p3 thick color                                              # Draw spline segment: Quadratic Bezier, 2 points, 1 control point
drawSplineSegmentBezierCubic     ‚áê                         "DrawSplineSegmentBezierCubic"     _R‚ü®v2‚ãÑv2‚ãÑv2‚ãÑv2‚ãÑf‚ãÑcolor‚ü©                           # p1 c2 c3 p4 thick color                                           # Draw spline segment: Cubic Bezier, 2 points, 2 control points
getSplinePointLinear             ‚áê v2                      "GetSplinePointLinear"             _R‚ü®v2‚ãÑv2‚ãÑf‚ü©                                       # startPos endPos t                                                 # Get (evaluate) spline point: Linear
getSplinePointBasis              ‚áê v2                      "GetSplinePointBasis"              _R‚ü®v2‚ãÑv2‚ãÑv2‚ãÑv2‚ãÑf‚ü©                                 # p1 p2 p3 p4 t                                                     # Get (evaluate) spline point: B-Spline
getSplinePointCatmullRom         ‚áê v2                      "GetSplinePointCatmullRom"         _R‚ü®v2‚ãÑv2‚ãÑv2‚ãÑv2‚ãÑf‚ü©                                 # p1 p2 p3 p4 t                                                     # Get (evaluate) spline point: Catmull-Rom
getSplinePointBezierQuad         ‚áê v2                      "GetSplinePointBezierQuad"         _R‚ü®v2‚ãÑv2‚ãÑv2‚ãÑf‚ü©                                    # p1 c2 p3 t                                                        # Get (evaluate) spline point: Quadratic Bezier
getSplinePointBezierCubic        ‚áê v2                      "GetSplinePointBezierCubic"        _R‚ü®v2‚ãÑv2‚ãÑv2‚ãÑv2‚ãÑf‚ü©                                 # p1 c2 c3 p4 t                                                     # Get (evaluate) spline point: Cubic Bezier
checkCollisionRecs               ‚áê bool                    "CheckCollisionRecs"               _R‚ü®rectangle‚ãÑrectangle‚ü©                           # rec1 rec2                                                         # Check collision between two rectangles
checkCollisionCircles            ‚áê bool                    "CheckCollisionCircles"            _R‚ü®v2‚ãÑf‚ãÑv2‚ãÑf‚ü©                                     # center1 radius1 center2 radius2                                   # Check collision between two circles
checkCollisionCircleRec          ‚áê bool                    "CheckCollisionCircleRec"          _R‚ü®v2‚ãÑf‚ãÑrectangle‚ü©                                # center radius rec                                                 # Check collision between circle and rectangle
checkCollisionPointRec           ‚áê bool                    "CheckCollisionPointRec"           _R‚ü®v2‚ãÑrectangle‚ü©                                  # point rec                                                         # Check if point is inside rectangle
checkCollisionPointCircle        ‚áê bool                    "CheckCollisionPointCircle"        _R‚ü®v2‚ãÑv2‚ãÑf‚ü©                                       # point center radius                                               # Check if point is inside circle
checkCollisionPointTriangle      ‚áê bool                    "CheckCollisionPointTriangle"      _R‚ü®v2‚ãÑv2‚ãÑv2‚ãÑv2‚ü©                                   # point p1 p2 p3                                                    # Check if point is inside a triangle
checkCollisionPointPoly          ‚áê bool                    "CheckCollisionPointPoly"          _R‚ü®v2‚ãÑ"*"‚àæv2‚ãÑi‚ü©                                   # point points pointCount                                           # Check if point is within a polygon described by array of vertices
checkCollisionPointPolyRef       ‚áê bool                    "CheckCollisionPointPoly"          _R‚ü®v2‚ãÑ"&"‚àæv2‚ãÑi‚ü©                                   # point points pointCount                                           # Check if point is within a polygon described by array of vertices
checkCollisionLines              ‚áê bool                    "CheckCollisionLines"              _R‚ü®v2‚ãÑv2‚ãÑv2‚ãÑv2‚ãÑ"*"‚àæv2‚ü©                            # startPos1 endPos1 startPos2 endPos2 collisionPoint                # Check the collision between two lines defined by two points each, returns collision point by reference
checkCollisionLinesRef           ‚áê bool                    "CheckCollisionLines"              _R‚ü®v2‚ãÑv2‚ãÑv2‚ãÑv2‚ãÑ"&"‚àæv2‚ü©                            # startPos1 endPos1 startPos2 endPos2 collisionPoint                # Check the collision between two lines defined by two points each, returns collision point by reference
checkCollisionPointLine          ‚áê bool                    "CheckCollisionPointLine"          _R‚ü®v2‚ãÑv2‚ãÑv2‚ãÑi‚ü©                                    # point p1 p2 threshold                                             # Check if point belongs to line created between two points [p1] and [p2] with defined margin in pixels [threshold]
getCollisionRec                  ‚áê rectangle               "GetCollisionRec"                  _R‚ü®rectangle‚ãÑrectangle‚ü©                           # rec1 rec2                                                         # Get collision rectangle for two rectangles collision
loadImage                        ‚áê image                   "LoadImage"                        _R‚ü®str‚ü©                                           # fileName                                                          # Load image from file into CPU memory (RAM)
loadImageRaw                     ‚áê image                   "LoadImageRaw"                     _R‚ü®str‚ãÑi‚ãÑi‚ãÑi‚ãÑi‚ü©                                   # fileName width height format headerSize                           # Load image from RAW file data
loadImageSvg                     ‚áê image                   "LoadImageSvg"                     _R‚ü®str‚ãÑi‚ãÑi‚ü©                                       # fileNameOrString width height                                     # Load image from SVG file data or string with specified size
loadImageAnim                    ‚áê image                   "LoadImageAnim"                    _R‚ü®str‚ãÑ"*"‚àæi‚ü©                                     # fileName frames                                                   # Load image sequence from file (frames appended to image.data)
loadImageAnimRef                 ‚áê image                   "LoadImageAnim"                    _R‚ü®str‚ãÑ"&"‚àæi‚ü©                                     # fileName frames                                                   # Load image sequence from file (frames appended to image.data)
loadImageFromMemory              ‚áê image                   "LoadImageFromMemory"              _R‚ü®str‚ãÑustr‚ãÑi‚ü©                                    # fileType fileData dataSize                                        # Load image from memory buffer, fileType refers to extension: i.e. '.png'
loadImageFromTexture             ‚áê image                   "LoadImageFromTexture"             _R‚ü®texture2D‚ü©                                     # texture                                                           # Load image from GPU texture data
loadImageFromScreen              ‚áê image                   "LoadImageFromScreen"              _R‚ü®‚ü©                                              #                                                                   # Load image from screen buffer and (screenshot)
isImageReady                     ‚áê bool                    "IsImageReady"                     _R‚ü®image‚ü©                                         # image                                                             # Check if an image is ready
unloadImage                      ‚áê                         "UnloadImage"                      _R‚ü®image‚ü©                                         # image                                                             # Unload image from CPU memory (RAM)
exportImage                      ‚áê bool                    "ExportImage"                      _R‚ü®image‚ãÑstr‚ü©                                     # image fileName                                                    # Export image data to file, returns true on success
exportImageToMemory              ‚áê (ptr‚ä£ustr)              "ExportImageToMemory"              _R‚ü®image‚ãÑstr‚ãÑ"*"‚àæi‚ü©                               # image fileType fileSize                                           # Export image to memory buffer
exportImageToMemoryRef           ‚áê (ptr‚ä£ustr)              "ExportImageToMemory"              _R‚ü®image‚ãÑstr‚ãÑ"&"‚àæi‚ü©                               # image fileType fileSize                                           # Export image to memory buffer
exportImageAsCode                ‚áê bool                    "ExportImageAsCode"                _R‚ü®image‚ãÑstr‚ü©                                     # image fileName                                                    # Export image as code file defining an array of bytes, returns true on success
genImageColor                    ‚áê image                   "GenImageColor"                    _R‚ü®i‚ãÑi‚ãÑcolor‚ü©                                     # width height color                                                # Generate image: plain color
genImageGradientLinear           ‚áê image                   "GenImageGradientLinear"           _R‚ü®i‚ãÑi‚ãÑi‚ãÑcolor‚ãÑcolor‚ü©                             # width height direction start end                                  # Generate image: linear gradient, direction in degrees [0..360], 0=Vertical gradient
genImageGradientRadial           ‚áê image                   "GenImageGradientRadial"           _R‚ü®i‚ãÑi‚ãÑf‚ãÑcolor‚ãÑcolor‚ü©                             # width height density inner outer                                  # Generate image: radial gradient
genImageGradientSquare           ‚áê image                   "GenImageGradientSquare"           _R‚ü®i‚ãÑi‚ãÑf‚ãÑcolor‚ãÑcolor‚ü©                             # width height density inner outer                                  # Generate image: square gradient
genImageChecked                  ‚áê image                   "GenImageChecked"                  _R‚ü®i‚ãÑi‚ãÑi‚ãÑi‚ãÑcolor‚ãÑcolor‚ü©                           # width height checksX checksY col1 col2                            # Generate image: checked
genImageWhiteNoise               ‚áê image                   "GenImageWhiteNoise"               _R‚ü®i‚ãÑi‚ãÑf‚ü©                                         # width height factor                                               # Generate image: white noise
genImagePerlinNoise              ‚áê image                   "GenImagePerlinNoise"              _R‚ü®i‚ãÑi‚ãÑi‚ãÑi‚ãÑf‚ü©                                     # width height offsetX offsetY scale                                # Generate image: perlin noise
genImageCellular                 ‚áê image                   "GenImageCellular"                 _R‚ü®i‚ãÑi‚ãÑi‚ü©                                         # width height tileSize                                             # Generate image: cellular algorithm, bigger tileSize means bigger cells
genImageText                     ‚áê image                   "GenImageText"                     _R‚ü®i‚ãÑi‚ãÑstr‚ü©                                       # width height text                                                 # Generate image: grayscale image from text data
imageCopy                        ‚áê image                   "ImageCopy"                        _R‚ü®image‚ü©                                         # image                                                             # Create an image duplicate (useful for transformations)
imageFromImage                   ‚áê image                   "ImageFromImage"                   _R‚ü®image‚ãÑrectangle‚ü©                               # image rec                                                         # Create an image from another image piece
imageText                        ‚áê image                   "ImageText"                        _R‚ü®str‚ãÑi‚ãÑcolor‚ü©                                   # text fontSize color                                               # Create an image from text (default font)
imageTextEx                      ‚áê image                   "ImageTextEx"                      _R‚ü®font‚ãÑstr‚ãÑf‚ãÑf‚ãÑcolor‚ü©                            # font text fontSize spacing tint                                   # Create an image from text (custom sprite font)
imageFormat                      ‚áê                         "ImageFormat"                      _R‚ü®"*"‚àæimage‚ãÑi‚ü©                                   # image newFormat                                                   # Convert image data to desired format
imageFormatRef                   ‚áê                         "ImageFormat"                      _R‚ü®"&"‚àæimage‚ãÑi‚ü©                                   # image newFormat                                                   # Convert image data to desired format
imageToPOT                       ‚áê                         "ImageToPOT"                       _R‚ü®"*"‚àæimage‚ãÑcolor‚ü©                               # image fill                                                        # Convert image to POT (power-of-two)
imageToPOTRef                    ‚áê                         "ImageToPOT"                       _R‚ü®"&"‚àæimage‚ãÑcolor‚ü©                               # image fill                                                        # Convert image to POT (power-of-two)
imageCrop                        ‚áê                         "ImageCrop"                        _R‚ü®"*"‚àæimage‚ãÑrectangle‚ü©                           # image crop                                                        # Crop an image to a defined rectangle
imageCropRef                     ‚áê                         "ImageCrop"                        _R‚ü®"&"‚àæimage‚ãÑrectangle‚ü©                           # image crop                                                        # Crop an image to a defined rectangle
imageAlphaCrop                   ‚áê                         "ImageAlphaCrop"                   _R‚ü®"*"‚àæimage‚ãÑf‚ü©                                   # image threshold                                                   # Crop image depending on alpha value
imageAlphaCropRef                ‚áê                         "ImageAlphaCrop"                   _R‚ü®"&"‚àæimage‚ãÑf‚ü©                                   # image threshold                                                   # Crop image depending on alpha value
imageAlphaClear                  ‚áê                         "ImageAlphaClear"                  _R‚ü®"*"‚àæimage‚ãÑcolor‚ãÑf‚ü©                             # image color threshold                                             # Clear alpha channel to desired color
imageAlphaClearRef               ‚áê                         "ImageAlphaClear"                  _R‚ü®"&"‚àæimage‚ãÑcolor‚ãÑf‚ü©                             # image color threshold                                             # Clear alpha channel to desired color
imageAlphaMask                   ‚áê                         "ImageAlphaMask"                   _R‚ü®"*"‚àæimage‚ãÑimage‚ü©                               # image alphaMask                                                   # Apply alpha mask to image
imageAlphaMaskRef                ‚áê                         "ImageAlphaMask"                   _R‚ü®"&"‚àæimage‚ãÑimage‚ü©                               # image alphaMask                                                   # Apply alpha mask to image
imageAlphaPremultiply            ‚áê                         "ImageAlphaPremultiply"            _R‚ü®"*"‚àæimage‚ü©                                     # image                                                             # Premultiply alpha channel
imageAlphaPremultiplyRef         ‚áê                         "ImageAlphaPremultiply"            _R‚ü®"&"‚àæimage‚ü©                                     # image                                                             # Premultiply alpha channel
imageBlurGaussian                ‚áê                         "ImageBlurGaussian"                _R‚ü®"*"‚àæimage‚ãÑi‚ü©                                   # image blurSize                                                    # Apply Gaussian blur using a box blur approximation
imageBlurGaussianRef             ‚áê                         "ImageBlurGaussian"                _R‚ü®"&"‚àæimage‚ãÑi‚ü©                                   # image blurSize                                                    # Apply Gaussian blur using a box blur approximation
imageResize                      ‚áê                         "ImageResize"                      _R‚ü®"*"‚àæimage‚ãÑi‚ãÑi‚ü©                                 # image newWidth newHeight                                          # Resize image (Bicubic scaling algorithm)
imageResizeRef                   ‚áê                         "ImageResize"                      _R‚ü®"&"‚àæimage‚ãÑi‚ãÑi‚ü©                                 # image newWidth newHeight                                          # Resize image (Bicubic scaling algorithm)
imageResizeNN                    ‚áê                         "ImageResizeNN"                    _R‚ü®"*"‚àæimage‚ãÑi‚ãÑi‚ü©                                 # image newWidth newHeight                                          # Resize image (Nearest-Neighbor scaling algorithm)
imageResizeNNRef                 ‚áê                         "ImageResizeNN"                    _R‚ü®"&"‚àæimage‚ãÑi‚ãÑi‚ü©                                 # image newWidth newHeight                                          # Resize image (Nearest-Neighbor scaling algorithm)
imageResizeCanvas                ‚áê                         "ImageResizeCanvas"                _R‚ü®"*"‚àæimage‚ãÑi‚ãÑi‚ãÑi‚ãÑi‚ãÑcolor‚ü©                       # image newWidth newHeight offsetX offsetY fill                     # Resize canvas and fill with color
imageResizeCanvasRef             ‚áê                         "ImageResizeCanvas"                _R‚ü®"&"‚àæimage‚ãÑi‚ãÑi‚ãÑi‚ãÑi‚ãÑcolor‚ü©                       # image newWidth newHeight offsetX offsetY fill                     # Resize canvas and fill with color
imageMipmaps                     ‚áê                         "ImageMipmaps"                     _R‚ü®"*"‚àæimage‚ü©                                     # image                                                             # Compute all mipmap levels for a provided image
imageMipmapsRef                  ‚áê                         "ImageMipmaps"                     _R‚ü®"&"‚àæimage‚ü©                                     # image                                                             # Compute all mipmap levels for a provided image
imageDither                      ‚áê                         "ImageDither"                      _R‚ü®"*"‚àæimage‚ãÑi‚ãÑi‚ãÑi‚ãÑi‚ü©                             # image rBpp gBpp bBpp aBpp                                         # Dither image data to 16bpp or lower (Floyd-Steinberg dithering)
imageDitherRef                   ‚áê                         "ImageDither"                      _R‚ü®"&"‚àæimage‚ãÑi‚ãÑi‚ãÑi‚ãÑi‚ü©                             # image rBpp gBpp bBpp aBpp                                         # Dither image data to 16bpp or lower (Floyd-Steinberg dithering)
imageFlipVertical                ‚áê                         "ImageFlipVertical"                _R‚ü®"*"‚àæimage‚ü©                                     # image                                                             # Flip image vertically
imageFlipVerticalRef             ‚áê                         "ImageFlipVertical"                _R‚ü®"&"‚àæimage‚ü©                                     # image                                                             # Flip image vertically
imageFlipHorizontal              ‚áê                         "ImageFlipHorizontal"              _R‚ü®"*"‚àæimage‚ü©                                     # image                                                             # Flip image horizontally
imageFlipHorizontalRef           ‚áê                         "ImageFlipHorizontal"              _R‚ü®"&"‚àæimage‚ü©                                     # image                                                             # Flip image horizontally
imageRotate                      ‚áê                         "ImageRotate"                      _R‚ü®"*"‚àæimage‚ãÑi‚ü©                                   # image degrees                                                     # Rotate image by input angle in degrees (-359 to 359)
imageRotateRef                   ‚áê                         "ImageRotate"                      _R‚ü®"&"‚àæimage‚ãÑi‚ü©                                   # image degrees                                                     # Rotate image by input angle in degrees (-359 to 359)
imageRotateCW                    ‚áê                         "ImageRotateCW"                    _R‚ü®"*"‚àæimage‚ü©                                     # image                                                             # Rotate image clockwise 90deg
imageRotateCWRef                 ‚áê                         "ImageRotateCW"                    _R‚ü®"&"‚àæimage‚ü©                                     # image                                                             # Rotate image clockwise 90deg
imageRotateCCW                   ‚áê                         "ImageRotateCCW"                   _R‚ü®"*"‚àæimage‚ü©                                     # image                                                             # Rotate image counter-clockwise 90deg
imageRotateCCWRef                ‚áê                         "ImageRotateCCW"                   _R‚ü®"&"‚àæimage‚ü©                                     # image                                                             # Rotate image counter-clockwise 90deg
imageColorTint                   ‚áê                         "ImageColorTint"                   _R‚ü®"*"‚àæimage‚ãÑcolor‚ü©                               # image color                                                       # Modify image color: tint
imageColorTintRef                ‚áê                         "ImageColorTint"                   _R‚ü®"&"‚àæimage‚ãÑcolor‚ü©                               # image color                                                       # Modify image color: tint
imageColorInvert                 ‚áê                         "ImageColorInvert"                 _R‚ü®"*"‚àæimage‚ü©                                     # image                                                             # Modify image color: invert
imageColorInvertRef              ‚áê                         "ImageColorInvert"                 _R‚ü®"&"‚àæimage‚ü©                                     # image                                                             # Modify image color: invert
imageColorGrayscale              ‚áê                         "ImageColorGrayscale"              _R‚ü®"*"‚àæimage‚ü©                                     # image                                                             # Modify image color: grayscale
imageColorGrayscaleRef           ‚áê                         "ImageColorGrayscale"              _R‚ü®"&"‚àæimage‚ü©                                     # image                                                             # Modify image color: grayscale
imageColorContrast               ‚áê                         "ImageColorContrast"               _R‚ü®"*"‚àæimage‚ãÑf‚ü©                                   # image contrast                                                    # Modify image color: contrast (-100 to 100)
imageColorContrastRef            ‚áê                         "ImageColorContrast"               _R‚ü®"&"‚àæimage‚ãÑf‚ü©                                   # image contrast                                                    # Modify image color: contrast (-100 to 100)
imageColorBrightness             ‚áê                         "ImageColorBrightness"             _R‚ü®"*"‚àæimage‚ãÑi‚ü©                                   # image brightness                                                  # Modify image color: brightness (-255 to 255)
imageColorBrightnessRef          ‚áê                         "ImageColorBrightness"             _R‚ü®"&"‚àæimage‚ãÑi‚ü©                                   # image brightness                                                  # Modify image color: brightness (-255 to 255)
imageColorReplace                ‚áê                         "ImageColorReplace"                _R‚ü®"*"‚àæimage‚ãÑcolor‚ãÑcolor‚ü©                         # image color replace                                               # Modify image color: replace color
imageColorReplaceRef             ‚áê                         "ImageColorReplace"                _R‚ü®"&"‚àæimage‚ãÑcolor‚ãÑcolor‚ü©                         # image color replace                                               # Modify image color: replace color
loadImageColors                  ‚áê (ptr‚ä£"*"‚àæcolor)         "LoadImageColors"                  _R‚ü®image‚ü©                                         # image                                                             # Load color data from image as a Color array (RGBA - 32bit)
loadImagePalette                 ‚áê (ptr‚ä£"*"‚àæcolor)         "LoadImagePalette"                 _R‚ü®image‚ãÑi‚ãÑ"*"‚àæi‚ü©                                 # image maxPaletteSize colorCount                                   # Load colors palette from image as a Color array (RGBA - 32bit)
loadImagePaletteRef              ‚áê (ptr‚ä£"*"‚àæcolor)         "LoadImagePalette"                 _R‚ü®image‚ãÑi‚ãÑ"&"‚àæi‚ü©                                 # image maxPaletteSize colorCount                                   # Load colors palette from image as a Color array (RGBA - 32bit)
unloadImageColors                ‚áê                         "UnloadImageColors"                _R‚ü®"*"‚àæcolor‚ü©                                     # colors                                                            # Unload color data loaded with LoadImageColors()
unloadImageColorsRef             ‚áê                         "UnloadImageColors"                _R‚ü®"&"‚àæcolor‚ü©                                     # colors                                                            # Unload color data loaded with LoadImageColors()
unloadImagePalette               ‚áê                         "UnloadImagePalette"               _R‚ü®"*"‚àæcolor‚ü©                                     # colors                                                            # Unload colors palette loaded with LoadImagePalette()
unloadImagePaletteRef            ‚áê                         "UnloadImagePalette"               _R‚ü®"&"‚àæcolor‚ü©                                     # colors                                                            # Unload colors palette loaded with LoadImagePalette()
getImageAlphaBorder              ‚áê rectangle               "GetImageAlphaBorder"              _R‚ü®image‚ãÑf‚ü©                                       # image threshold                                                   # Get image alpha border rectangle
getImageColor                    ‚áê color                   "GetImageColor"                    _R‚ü®image‚ãÑi‚ãÑi‚ü©                                     # image x y                                                         # Get image pixel color at (x, y) position
imageClearBackground             ‚áê                         "ImageClearBackground"             _R‚ü®"*"‚àæimage‚ãÑcolor‚ü©                               # dst color                                                         # Clear image background with given color
imageClearBackgroundRef          ‚áê                         "ImageClearBackground"             _R‚ü®"&"‚àæimage‚ãÑcolor‚ü©                               # dst color                                                         # Clear image background with given color
imageDrawPixel                   ‚áê                         "ImageDrawPixel"                   _R‚ü®"*"‚àæimage‚ãÑi‚ãÑi‚ãÑcolor‚ü©                           # dst posX posY color                                               # Draw pixel within an image
imageDrawPixelRef                ‚áê                         "ImageDrawPixel"                   _R‚ü®"&"‚àæimage‚ãÑi‚ãÑi‚ãÑcolor‚ü©                           # dst posX posY color                                               # Draw pixel within an image
imageDrawPixelV                  ‚áê                         "ImageDrawPixelV"                  _R‚ü®"*"‚àæimage‚ãÑv2‚ãÑcolor‚ü©                            # dst position color                                                # Draw pixel within an image (Vector version)
imageDrawPixelVRef               ‚áê                         "ImageDrawPixelV"                  _R‚ü®"&"‚àæimage‚ãÑv2‚ãÑcolor‚ü©                            # dst position color                                                # Draw pixel within an image (Vector version)
imageDrawLine                    ‚áê                         "ImageDrawLine"                    _R‚ü®"*"‚àæimage‚ãÑi‚ãÑi‚ãÑi‚ãÑi‚ãÑcolor‚ü©                       # dst startPosX startPosY endPosX endPosY color                     # Draw line within an image
imageDrawLineRef                 ‚áê                         "ImageDrawLine"                    _R‚ü®"&"‚àæimage‚ãÑi‚ãÑi‚ãÑi‚ãÑi‚ãÑcolor‚ü©                       # dst startPosX startPosY endPosX endPosY color                     # Draw line within an image
imageDrawLineV                   ‚áê                         "ImageDrawLineV"                   _R‚ü®"*"‚àæimage‚ãÑv2‚ãÑv2‚ãÑcolor‚ü©                         # dst start end color                                               # Draw line within an image (Vector version)
imageDrawLineVRef                ‚áê                         "ImageDrawLineV"                   _R‚ü®"&"‚àæimage‚ãÑv2‚ãÑv2‚ãÑcolor‚ü©                         # dst start end color                                               # Draw line within an image (Vector version)
imageDrawCircle                  ‚áê                         "ImageDrawCircle"                  _R‚ü®"*"‚àæimage‚ãÑi‚ãÑi‚ãÑi‚ãÑcolor‚ü©                         # dst centerX centerY radius color                                  # Draw a filled circle within an image
imageDrawCircleRef               ‚áê                         "ImageDrawCircle"                  _R‚ü®"&"‚àæimage‚ãÑi‚ãÑi‚ãÑi‚ãÑcolor‚ü©                         # dst centerX centerY radius color                                  # Draw a filled circle within an image
imageDrawCircleV                 ‚áê                         "ImageDrawCircleV"                 _R‚ü®"*"‚àæimage‚ãÑv2‚ãÑi‚ãÑcolor‚ü©                          # dst center radius color                                           # Draw a filled circle within an image (Vector version)
imageDrawCircleVRef              ‚áê                         "ImageDrawCircleV"                 _R‚ü®"&"‚àæimage‚ãÑv2‚ãÑi‚ãÑcolor‚ü©                          # dst center radius color                                           # Draw a filled circle within an image (Vector version)
imageDrawCircleLines             ‚áê                         "ImageDrawCircleLines"             _R‚ü®"*"‚àæimage‚ãÑi‚ãÑi‚ãÑi‚ãÑcolor‚ü©                         # dst centerX centerY radius color                                  # Draw circle outline within an image
imageDrawCircleLinesRef          ‚áê                         "ImageDrawCircleLines"             _R‚ü®"&"‚àæimage‚ãÑi‚ãÑi‚ãÑi‚ãÑcolor‚ü©                         # dst centerX centerY radius color                                  # Draw circle outline within an image
imageDrawCircleLinesV            ‚áê                         "ImageDrawCircleLinesV"            _R‚ü®"*"‚àæimage‚ãÑv2‚ãÑi‚ãÑcolor‚ü©                          # dst center radius color                                           # Draw circle outline within an image (Vector version)
imageDrawCircleLinesVRef         ‚áê                         "ImageDrawCircleLinesV"            _R‚ü®"&"‚àæimage‚ãÑv2‚ãÑi‚ãÑcolor‚ü©                          # dst center radius color                                           # Draw circle outline within an image (Vector version)
imageDrawRectangle               ‚áê                         "ImageDrawRectangle"               _R‚ü®"*"‚àæimage‚ãÑi‚ãÑi‚ãÑi‚ãÑi‚ãÑcolor‚ü©                       # dst posX posY width height color                                  # Draw rectangle within an image
imageDrawRectangleRef            ‚áê                         "ImageDrawRectangle"               _R‚ü®"&"‚àæimage‚ãÑi‚ãÑi‚ãÑi‚ãÑi‚ãÑcolor‚ü©                       # dst posX posY width height color                                  # Draw rectangle within an image
imageDrawRectangleV              ‚áê                         "ImageDrawRectangleV"              _R‚ü®"*"‚àæimage‚ãÑv2‚ãÑv2‚ãÑcolor‚ü©                         # dst position size color                                           # Draw rectangle within an image (Vector version)
imageDrawRectangleVRef           ‚áê                         "ImageDrawRectangleV"              _R‚ü®"&"‚àæimage‚ãÑv2‚ãÑv2‚ãÑcolor‚ü©                         # dst position size color                                           # Draw rectangle within an image (Vector version)
imageDrawRectangleRec            ‚áê                         "ImageDrawRectangleRec"            _R‚ü®"*"‚àæimage‚ãÑrectangle‚ãÑcolor‚ü©                     # dst rec color                                                     # Draw rectangle within an image
imageDrawRectangleRecRef         ‚áê                         "ImageDrawRectangleRec"            _R‚ü®"&"‚àæimage‚ãÑrectangle‚ãÑcolor‚ü©                     # dst rec color                                                     # Draw rectangle within an image
imageDrawRectangleLines          ‚áê                         "ImageDrawRectangleLines"          _R‚ü®"*"‚àæimage‚ãÑrectangle‚ãÑi‚ãÑcolor‚ü©                   # dst rec thick color                                               # Draw rectangle lines within an image
imageDrawRectangleLinesRef       ‚áê                         "ImageDrawRectangleLines"          _R‚ü®"&"‚àæimage‚ãÑrectangle‚ãÑi‚ãÑcolor‚ü©                   # dst rec thick color                                               # Draw rectangle lines within an image
imageDraw                        ‚áê                         "ImageDraw"                        _R‚ü®"*"‚àæimage‚ãÑimage‚ãÑrectangle‚ãÑrectangle‚ãÑcolor‚ü©     # dst src srcRec dstRec tint                                        # Draw a source image within a destination image (tint applied to source)
imageDrawRef                     ‚áê                         "ImageDraw"                        _R‚ü®"&"‚àæimage‚ãÑimage‚ãÑrectangle‚ãÑrectangle‚ãÑcolor‚ü©     # dst src srcRec dstRec tint                                        # Draw a source image within a destination image (tint applied to source)
imageDrawText                    ‚áê                         "ImageDrawText"                    _R‚ü®"*"‚àæimage‚ãÑstr‚ãÑi‚ãÑi‚ãÑi‚ãÑcolor‚ü©                     # dst text posX posY fontSize color                                 # Draw text (using default font) within an image (destination)
imageDrawTextRef                 ‚áê                         "ImageDrawText"                    _R‚ü®"&"‚àæimage‚ãÑstr‚ãÑi‚ãÑi‚ãÑi‚ãÑcolor‚ü©                     # dst text posX posY fontSize color                                 # Draw text (using default font) within an image (destination)
imageDrawTextEx                  ‚áê                         "ImageDrawTextEx"                  _R‚ü®"*"‚àæimage‚ãÑfont‚ãÑstr‚ãÑv2‚ãÑf‚ãÑf‚ãÑcolor‚ü©               # dst font text position fontSize spacing tint                      # Draw text (custom sprite font) within an image (destination)
imageDrawTextExRef               ‚áê                         "ImageDrawTextEx"                  _R‚ü®"&"‚àæimage‚ãÑfont‚ãÑstr‚ãÑv2‚ãÑf‚ãÑf‚ãÑcolor‚ü©               # dst font text position fontSize spacing tint                      # Draw text (custom sprite font) within an image (destination)
loadTexture                      ‚áê texture2D               "LoadTexture"                      _R‚ü®str‚ü©                                           # fileName                                                          # Load texture from file into GPU memory (VRAM)
loadTextureFromImage             ‚áê texture2D               "LoadTextureFromImage"             _R‚ü®image‚ü©                                         # image                                                             # Load texture from image data
loadTextureCubemap               ‚áê textureCubemap          "LoadTextureCubemap"               _R‚ü®image‚ãÑi‚ü©                                       # image layout                                                      # Load cubemap from image, multiple image cubemap layouts supported
loadRenderTexture                ‚áê renderTexture2D         "LoadRenderTexture"                _R‚ü®i‚ãÑi‚ü©                                           # width height                                                      # Load texture for rendering (framebuffer)
isTextureReady                   ‚áê bool                    "IsTextureReady"                   _R‚ü®texture2D‚ü©                                     # texture                                                           # Check if a texture is ready
unloadTexture                    ‚áê                         "UnloadTexture"                    _R‚ü®texture2D‚ü©                                     # texture                                                           # Unload texture from GPU memory (VRAM)
isRenderTextureReady             ‚áê bool                    "IsRenderTextureReady"             _R‚ü®renderTexture2D‚ü©                               # target                                                            # Check if a render texture is ready
unloadRenderTexture              ‚áê                         "UnloadRenderTexture"              _R‚ü®renderTexture2D‚ü©                               # target                                                            # Unload render texture from GPU memory (VRAM)
updateTexture                    ‚áê                         "UpdateTexture"                    _R‚ü®texture2D‚ãÑptr‚ü©                                 # texture pixels                                                    # Update GPU texture with new data
updateTextureRaw                 ‚áê                         "UpdateTexture"                    _R‚ü®texture2D‚ãÑ"*i8"‚ü©                               # texture pixels                                                    # Update GPU texture with new data
updateTextureRec                 ‚áê                         "UpdateTextureRec"                 _R‚ü®texture2D‚ãÑrectangle‚ãÑptr‚ü©                       # texture rec pixels                                                # Update GPU texture rectangle with new data
updateTextureRecRaw              ‚áê                         "UpdateTextureRec"                 _R‚ü®texture2D‚ãÑrectangle‚ãÑ"*i8"‚ü©                     # texture rec pixels                                                # Update GPU texture rectangle with new data
genTextureMipmaps                ‚áê                         "GenTextureMipmaps"                _R‚ü®"*"‚àætexture2D‚ü©                                 # texture                                                           # Generate GPU mipmaps for a texture
genTextureMipmapsRef             ‚áê                         "GenTextureMipmaps"                _R‚ü®"&"‚àætexture2D‚ü©                                 # texture                                                           # Generate GPU mipmaps for a texture
setTextureFilter                 ‚áê                         "SetTextureFilter"                 _R‚ü®texture2D‚ãÑi‚ü©                                   # texture filter                                                    # Set texture scaling filter mode
setTextureWrap                   ‚áê                         "SetTextureWrap"                   _R‚ü®texture2D‚ãÑi‚ü©                                   # texture wrap                                                      # Set texture wrapping mode
drawTexture                      ‚áê                         "DrawTexture"                      _R‚ü®texture2D‚ãÑi‚ãÑi‚ãÑcolor‚ü©                           # texture posX posY tint                                            # Draw a Texture2D
drawTextureV                     ‚áê                         "DrawTextureV"                     _R‚ü®texture2D‚ãÑv2‚ãÑcolor‚ü©                            # texture position tint                                             # Draw a Texture2D with position defined as Vector2
drawTextureEx                    ‚áê                         "DrawTextureEx"                    _R‚ü®texture2D‚ãÑv2‚ãÑf‚ãÑf‚ãÑcolor‚ü©                        # texture position rotation scale tint                              # Draw a Texture2D with extended parameters
drawTextureRec                   ‚áê                         "DrawTextureRec"                   _R‚ü®texture2D‚ãÑrectangle‚ãÑv2‚ãÑcolor‚ü©                  # texture source position tint                                      # Draw a part of a texture defined by a rectangle
drawTexturePro                   ‚áê                         "DrawTexturePro"                   _R‚ü®texture2D‚ãÑrectangle‚ãÑrectangle‚ãÑv2‚ãÑf‚ãÑcolor‚ü©      # texture source dest origin rotation tint                          # Draw a part of a texture defined by a rectangle with 'pro' parameters
drawTextureNPatch                ‚áê                         "DrawTextureNPatch"                _R‚ü®texture2D‚ãÑnPatchInfo‚ãÑrectangle‚ãÑv2‚ãÑf‚ãÑcolor‚ü©     # texture nPatchInfo dest origin rotation tint                      # Draws a texture (or part of it) that stretches or shrinks nicely
fade                             ‚áê color                   "Fade"                             _R‚ü®color‚ãÑf‚ü©                                       # color alpha                                                       # Get color with alpha applied, alpha goes from 0.0f to 1.0f
colorToInt                       ‚áê i                       "ColorToInt"                       _R‚ü®color‚ü©                                         # color                                                             # Get hexadecimal value for a Color
colorNormalize                   ‚áê v4                      "ColorNormalize"                   _R‚ü®color‚ü©                                         # color                                                             # Get Color normalized as float [0..1]
colorFromNormalized              ‚áê color                   "ColorFromNormalized"              _R‚ü®v4‚ü©                                            # normalized                                                        # Get Color from normalized values [0..1]
colorToHSV                       ‚áê v3                      "ColorToHSV"                       _R‚ü®color‚ü©                                         # color                                                             # Get HSV values for a Color, hue [0..360], saturation/value [0..1]
colorFromHSV                     ‚áê color                   "ColorFromHSV"                     _R‚ü®f‚ãÑf‚ãÑf‚ü©                                         # hue saturation value                                              # Get a Color from HSV values, hue [0..360], saturation/value [0..1]
colorTint                        ‚áê color                   "ColorTint"                        _R‚ü®color‚ãÑcolor‚ü©                                   # color tint                                                        # Get color multiplied with another color
colorBrightness                  ‚áê color                   "ColorBrightness"                  _R‚ü®color‚ãÑf‚ü©                                       # color factor                                                      # Get color with brightness correction, brightness factor goes from -1.0f to 1.0f
colorContrast                    ‚áê color                   "ColorContrast"                    _R‚ü®color‚ãÑf‚ü©                                       # color contrast                                                    # Get color with contrast correction, contrast values between -1.0f and 1.0f
colorAlpha                       ‚áê color                   "ColorAlpha"                       _R‚ü®color‚ãÑf‚ü©                                       # color alpha                                                       # Get color with alpha applied, alpha goes from 0.0f to 1.0f
colorAlphaBlend                  ‚áê color                   "ColorAlphaBlend"                  _R‚ü®color‚ãÑcolor‚ãÑcolor‚ü©                             # dst src tint                                                      # Get src alpha-blended into dst color with tint
getColor                         ‚áê color                   "GetColor"                         _R‚ü®u‚ü©                                             # hexValue                                                          # Get Color structure from hexadecimal value
getPixelColor                    ‚áê color                   "GetPixelColor"                    _R‚ü®ptr‚ãÑi‚ü©                                         # srcPtr format                                                     # Get Color from a source pixel pointer of certain format
getPixelColorRef                 ‚áê color                   "GetPixelColor"                    _R‚ü®"&u8"‚ãÑi‚ü©                                       # srcPtr format                                                     # Get Color from a source pixel pointer of certain format
setPixelColor                    ‚áê                         "SetPixelColor"                    _R‚ü®ptr‚ãÑcolor‚ãÑi‚ü©                                   # dstPtr color format                                               # Set color formatted into destination pixel pointer
setPixelColorRef                 ‚áê                         "SetPixelColor"                    _R‚ü®"&u8"‚ãÑcolor‚ãÑi‚ü©                                 # dstPtr color format                                               # Set color formatted into destination pixel pointer
getPixelDataSize                 ‚áê i                       "GetPixelDataSize"                 _R‚ü®i‚ãÑi‚ãÑi‚ü©                                         # width height format                                               # Get pixel data size in bytes for certain format
getFontDefault                   ‚áê font                    "GetFontDefault"                   _R‚ü®‚ü©                                              #                                                                   # Get the default Font
loadFont                         ‚áê font                    "LoadFont"                         _R‚ü®str‚ü©                                           # fileName                                                          # Load font from file into GPU memory (VRAM)
loadFontEx                       ‚áê font                    "LoadFontEx"                       _R‚ü®str‚ãÑi‚ãÑ"*"‚àæi‚ãÑi‚ü©                                 # fileName fontSize codepoints codepointCount                       # Load font from file with extended parameters, use NULL for codepoints and 0 for codepointCount to load the default character set
loadFontExRef                    ‚áê font                    "LoadFontEx"                       _R‚ü®str‚ãÑi‚ãÑ"&"‚àæi‚ãÑi‚ü©                                 # fileName fontSize codepoints codepointCount                       # Load font from file with extended parameters, use NULL for codepoints and 0 for codepointCount to load the default character set
loadFontFromImage                ‚áê font                    "LoadFontFromImage"                _R‚ü®image‚ãÑcolor‚ãÑi‚ü©                                 # image key firstChar                                               # Load font from Image (XNA style)
loadFontFromMemory               ‚áê font                    "LoadFontFromMemory"               _R‚ü®str‚ãÑustr‚ãÑi‚ãÑi‚ãÑ"*"‚àæi‚ãÑi‚ü©                          # fileType fileData dataSize fontSize codepoints codepointCount     # Load font from memory buffer, fileType refers to extension: i.e. '.ttf'
loadFontFromMemoryRef            ‚áê font                    "LoadFontFromMemory"               _R‚ü®str‚ãÑustr‚ãÑi‚ãÑi‚ãÑ"&"‚àæi‚ãÑi‚ü©                          # fileType fileData dataSize fontSize codepoints codepointCount     # Load font from memory buffer, fileType refers to extension: i.e. '.ttf'
isFontReady                      ‚áê bool                    "IsFontReady"                      _R‚ü®font‚ü©                                          # font                                                              # Check if a font is ready
loadFontData                     ‚áê (ptr‚ä£"*"‚àæglyphInfo)     "LoadFontData"                     _R‚ü®ustr‚ãÑi‚ãÑi‚ãÑ"*"‚àæi‚ãÑi‚ãÑi‚ü©                            # fileData dataSize fontSize codepoints codepointCount type         # Load font data for further use
loadFontDataRef                  ‚áê (ptr‚ä£"*"‚àæglyphInfo)     "LoadFontData"                     _R‚ü®ustr‚ãÑi‚ãÑi‚ãÑ"&"‚àæi‚ãÑi‚ãÑi‚ü©                            # fileData dataSize fontSize codepoints codepointCount type         # Load font data for further use
genImageFontAtlas                ‚áê image                   "GenImageFontAtlas"                _R‚ü®"*"‚àæglyphInfo‚ãÑ"**"‚àærectangle‚ãÑi‚ãÑi‚ãÑi‚ãÑi‚ü©          # glyphs glyphRecs glyphCount fontSize padding packMethod           # Generate image font atlas using chars info
genImageFontAtlasRef             ‚áê image                   "GenImageFontAtlas"                _R‚ü®"*"‚àæglyphInfo‚ãÑ"&*"‚àærectangle‚ãÑi‚ãÑi‚ãÑi‚ãÑi‚ü©          # glyphs glyphRecs glyphCount fontSize padding packMethod           # Generate image font atlas using chars info
unloadFontData                   ‚áê                         "UnloadFontData"                   _R‚ü®"*"‚àæglyphInfo‚ãÑi‚ü©                               # glyphs glyphCount                                                 # Unload font chars info data (RAM)
unloadFontDataRef                ‚áê                         "UnloadFontData"                   _R‚ü®"&"‚àæglyphInfo‚ãÑi‚ü©                               # glyphs glyphCount                                                 # Unload font chars info data (RAM)
unloadFont                       ‚áê                         "UnloadFont"                       _R‚ü®font‚ü©                                          # font                                                              # Unload font from GPU memory (VRAM)
exportFontAsCode                 ‚áê bool                    "ExportFontAsCode"                 _R‚ü®font‚ãÑstr‚ü©                                      # font fileName                                                     # Export font as code file, returns true on success
drawFPS                          ‚áê                         "DrawFPS"                          _R‚ü®i‚ãÑi‚ü©                                           # posX posY                                                         # Draw current FPS
drawText                         ‚áê                         "DrawText"                         _R‚ü®str‚ãÑi‚ãÑi‚ãÑi‚ãÑcolor‚ü©                               # text posX posY fontSize color                                     # Draw text (using default font)
drawTextEx                       ‚áê                         "DrawTextEx"                       _R‚ü®font‚ãÑstr‚ãÑv2‚ãÑf‚ãÑf‚ãÑcolor‚ü©                         # font text position fontSize spacing tint                          # Draw text using font and additional parameters
drawTextPro                      ‚áê                         "DrawTextPro"                      _R‚ü®font‚ãÑstr‚ãÑv2‚ãÑv2‚ãÑf‚ãÑf‚ãÑf‚ãÑcolor‚ü©                    # font text position origin rotation fontSize spacing tint          # Draw text using Font and pro parameters (rotation)
drawTextCodepoint                ‚áê                         "DrawTextCodepoint"                _R‚ü®font‚ãÑi‚ãÑv2‚ãÑf‚ãÑcolor‚ü©                             # font codepoint position fontSize tint                             # Draw one character (codepoint)
drawTextCodepoints               ‚áê                         "DrawTextCodepoints"               _R‚ü®font‚ãÑ"*"‚àæi‚ãÑi‚ãÑv2‚ãÑf‚ãÑf‚ãÑcolor‚ü©                     # font codepoints codepointCount position fontSize spacing tint     # Draw multiple character (codepoint)
setTextLineSpacing               ‚áê                         "SetTextLineSpacing"               _R‚ü®i‚ü©                                             # spacing                                                           # Set vertical line spacing when drawing with line-breaks
measureText                      ‚áê i                       "MeasureText"                      _R‚ü®str‚ãÑi‚ü©                                         # text fontSize                                                     # Measure string width for default font
measureTextEx                    ‚áê v2                      "MeasureTextEx"                    _R‚ü®font‚ãÑstr‚ãÑf‚ãÑf‚ü©                                  # font text fontSize spacing                                        # Measure string size for Font
getGlyphIndex                    ‚áê i                       "GetGlyphIndex"                    _R‚ü®font‚ãÑi‚ü©                                        # font codepoint                                                    # Get glyph index position in font for a codepoint (unicode character), fallback to '?' if not found
getGlyphInfo                     ‚áê glyphInfo               "GetGlyphInfo"                     _R‚ü®font‚ãÑi‚ü©                                        # font codepoint                                                    # Get glyph font info data for a codepoint (unicode character), fallback to '?' if not found
getGlyphAtlasRec                 ‚áê rectangle               "GetGlyphAtlasRec"                 _R‚ü®font‚ãÑi‚ü©                                        # font codepoint                                                    # Get glyph rectangle in font atlas for a codepoint (unicode character), fallback to '?' if not found
loadUTF8                         ‚áê (ptr‚ä£str)               "LoadUTF8"                         _R‚ü®"*"‚àæi‚ãÑi‚ü©                                       # codepoints length                                                 # Load UTF-8 text encoded from codepoints array
unloadUTF8                       ‚áê                         "UnloadUTF8"                       _R‚ü®str‚ü©                                           # text                                                              # Unload UTF-8 text encoded from codepoints array
unloadUTF8Ref                    ‚áê                         "UnloadUTF8"                       _R‚ü®"&u8:c8"‚ü©                                      # text                                                              # Unload UTF-8 text encoded from codepoints array
loadCodepoints                   ‚áê (ptr‚ä£"*"‚àæi)             "LoadCodepoints"                   _R‚ü®str‚ãÑ"*"‚àæi‚ü©                                     # text count                                                        # Load all codepoints from a UTF-8 text string, codepoints count returned by parameter
loadCodepointsRef                ‚áê (ptr‚ä£"*"‚àæi)             "LoadCodepoints"                   _R‚ü®str‚ãÑ"&"‚àæi‚ü©                                     # text count                                                        # Load all codepoints from a UTF-8 text string, codepoints count returned by parameter
unloadCodepoints                 ‚áê                         "UnloadCodepoints"                 _R‚ü®"*"‚àæi‚ü©                                         # codepoints                                                        # Unload codepoints data from memory
unloadCodepointsRef              ‚áê                         "UnloadCodepoints"                 _R‚ü®"&"‚àæi‚ü©                                         # codepoints                                                        # Unload codepoints data from memory
getCodepointCount                ‚áê i                       "GetCodepointCount"                _R‚ü®str‚ü©                                           # text                                                              # Get total number of codepoints in a UTF-8 encoded string
getCodepoint                     ‚áê i                       "GetCodepoint"                     _R‚ü®str‚ãÑ"*"‚àæi‚ü©                                     # text codepointSize                                                # Get next codepoint in a UTF-8 encoded string, 0x3f('?') is returned on failure
getCodepointRef                  ‚áê i                       "GetCodepoint"                     _R‚ü®str‚ãÑ"&"‚àæi‚ü©                                     # text codepointSize                                                # Get next codepoint in a UTF-8 encoded string, 0x3f('?') is returned on failure
getCodepointNext                 ‚áê i                       "GetCodepointNext"                 _R‚ü®str‚ãÑ"*"‚àæi‚ü©                                     # text codepointSize                                                # Get next codepoint in a UTF-8 encoded string, 0x3f('?') is returned on failure
getCodepointNextRef              ‚áê i                       "GetCodepointNext"                 _R‚ü®str‚ãÑ"&"‚àæi‚ü©                                     # text codepointSize                                                # Get next codepoint in a UTF-8 encoded string, 0x3f('?') is returned on failure
getCodepointPrevious             ‚áê i                       "GetCodepointPrevious"             _R‚ü®str‚ãÑ"*"‚àæi‚ü©                                     # text codepointSize                                                # Get previous codepoint in a UTF-8 encoded string, 0x3f('?') is returned on failure
getCodepointPreviousRef          ‚áê i                       "GetCodepointPrevious"             _R‚ü®str‚ãÑ"&"‚àæi‚ü©                                     # text codepointSize                                                # Get previous codepoint in a UTF-8 encoded string, 0x3f('?') is returned on failure
codepointToUTF8                  ‚áê (ptr‚ä£str)               "CodepointToUTF8"                  _R‚ü®i‚ãÑ"*"‚àæi‚ü©                                       # codepoint utf8Size                                                # Encode one codepoint into UTF-8 byte array (array length returned as parameter)
codepointToUTF8Ref               ‚áê (ptr‚ä£str)               "CodepointToUTF8"                  _R‚ü®i‚ãÑ"&"‚àæi‚ü©                                       # codepoint utf8Size                                                # Encode one codepoint into UTF-8 byte array (array length returned as parameter)
textCopy                         ‚áê i                       "TextCopy"                         _R‚ü®str‚ãÑstr‚ü©                                       # dst src                                                           # Copy one string to another, returns bytes copied
textCopyRef                      ‚áê i                       "TextCopy"                         _R‚ü®"&u8:c8"‚ãÑstr‚ü©                                  # dst src                                                           # Copy one string to another, returns bytes copied
textIsEqual                      ‚áê bool                    "TextIsEqual"                      _R‚ü®str‚ãÑstr‚ü©                                       # text1 text2                                                       # Check if two text string are equal
textLength                       ‚áê u                       "TextLength"                       _R‚ü®str‚ü©                                           # text                                                              # Get text length, checks for '\0' ending
textFormat                       ‚áê (ptr‚ä£str)               "TextFormat"                       _R‚ü®str‚ãÑptr‚ü©                                       # text args                                                         # Text formatting with variables (sprintf() style)
textSubtext                      ‚áê (ptr‚ä£str)               "TextSubtext"                      _R‚ü®str‚ãÑi‚ãÑi‚ü©                                       # text position length                                              # Get a piece of a text string
textReplace                      ‚áê (ptr‚ä£str)               "TextReplace"                      _R‚ü®str‚ãÑstr‚ãÑstr‚ü©                                   # text replace by                                                   # Replace text string (WARNING: memory must be freed!)
textReplaceRef                   ‚áê (ptr‚ä£str)               "TextReplace"                      _R‚ü®"&u8:c8"‚ãÑstr‚ãÑstr‚ü©                              # text replace by                                                   # Replace text string (WARNING: memory must be freed!)
textInsert                       ‚áê (ptr‚ä£str)               "TextInsert"                       _R‚ü®str‚ãÑstr‚ãÑi‚ü©                                     # text insert position                                              # Insert text in a position (WARNING: memory must be freed!)
textJoin                         ‚áê (ptr‚ä£str)               "TextJoin"                         _R‚ü®"*"‚àæstr‚ãÑi‚ãÑstr‚ü©                                 # textList count delimiter                                          # Join text strings with delimiter
textSplit                        ‚áê (ptr‚ä£"*"‚àæstr)           "TextSplit"                        _R‚ü®str‚ãÑu8‚ãÑ"*"‚àæi‚ü©                                  # text delimiter count                                              # Split text into multiple strings
textSplitRef                     ‚áê (ptr‚ä£"*"‚àæstr)           "TextSplit"                        _R‚ü®str‚ãÑu8‚ãÑ"&"‚àæi‚ü©                                  # text delimiter count                                              # Split text into multiple strings
textAppend                       ‚áê                         "TextAppend"                       _R‚ü®str‚ãÑstr‚ãÑ"*"‚àæi‚ü©                                 # text append position                                              # Append text at specific position and move cursor!
textAppendRef                    ‚áê                         "TextAppend"                       _R‚ü®"&u8:c8"‚ãÑstr‚ãÑ"&"‚àæi‚ü©                            # text append position                                              # Append text at specific position and move cursor!
textFindIndex                    ‚áê i                       "TextFindIndex"                    _R‚ü®str‚ãÑstr‚ü©                                       # text find                                                         # Find first text occurrence within a string
textToUpper                      ‚áê (ptr‚ä£str)               "TextToUpper"                      _R‚ü®str‚ü©                                           # text                                                              # Get upper case version of provided string
textToLower                      ‚áê (ptr‚ä£str)               "TextToLower"                      _R‚ü®str‚ü©                                           # text                                                              # Get lower case version of provided string
textToPascal                     ‚áê (ptr‚ä£str)               "TextToPascal"                     _R‚ü®str‚ü©                                           # text                                                              # Get Pascal case notation version of provided string
textToInteger                    ‚áê i                       "TextToInteger"                    _R‚ü®str‚ü©                                           # text                                                              # Get integer value from text (negative values not supported)
drawLine3D                       ‚áê                         "DrawLine3D"                       _R‚ü®v3‚ãÑv3‚ãÑcolor‚ü©                                   # startPos endPos color                                             # Draw a line in 3D world space
drawPoint3D                      ‚áê                         "DrawPoint3D"                      _R‚ü®v3‚ãÑcolor‚ü©                                      # position color                                                    # Draw a point in 3D space, actually a small line
drawCircle3D                     ‚áê                         "DrawCircle3D"                     _R‚ü®v3‚ãÑf‚ãÑv3‚ãÑf‚ãÑcolor‚ü©                               # center radius rotationAxis rotationAngle color                    # Draw a circle in 3D world space
drawTriangle3D                   ‚áê                         "DrawTriangle3D"                   _R‚ü®v3‚ãÑv3‚ãÑv3‚ãÑcolor‚ü©                                # v1 v2 v3 color                                                    # Draw a color-filled triangle (vertex in counter-clockwise order!)
drawTriangleStrip3D              ‚áê                         "DrawTriangleStrip3D"              _R‚ü®"*"‚àæv3‚ãÑi‚ãÑcolor‚ü©                                # points pointCount color                                           # Draw a triangle strip defined by points
drawTriangleStrip3DRef           ‚áê                         "DrawTriangleStrip3D"              _R‚ü®"&"‚àæv3‚ãÑi‚ãÑcolor‚ü©                                # points pointCount color                                           # Draw a triangle strip defined by points
drawCube                         ‚áê                         "DrawCube"                         _R‚ü®v3‚ãÑf‚ãÑf‚ãÑf‚ãÑcolor‚ü©                                # position width height length color                                # Draw cube
drawCubeV                        ‚áê                         "DrawCubeV"                        _R‚ü®v3‚ãÑv3‚ãÑcolor‚ü©                                   # position size color                                               # Draw cube (Vector version)
drawCubeWires                    ‚áê                         "DrawCubeWires"                    _R‚ü®v3‚ãÑf‚ãÑf‚ãÑf‚ãÑcolor‚ü©                                # position width height length color                                # Draw cube wires
drawCubeWiresV                   ‚áê                         "DrawCubeWiresV"                   _R‚ü®v3‚ãÑv3‚ãÑcolor‚ü©                                   # position size color                                               # Draw cube wires (Vector version)
drawSphere                       ‚áê                         "DrawSphere"                       _R‚ü®v3‚ãÑf‚ãÑcolor‚ü©                                    # centerPos radius color                                            # Draw sphere
drawSphereEx                     ‚áê                         "DrawSphereEx"                     _R‚ü®v3‚ãÑf‚ãÑi‚ãÑi‚ãÑcolor‚ü©                                # centerPos radius rings slices color                               # Draw sphere with extended parameters
drawSphereWires                  ‚áê                         "DrawSphereWires"                  _R‚ü®v3‚ãÑf‚ãÑi‚ãÑi‚ãÑcolor‚ü©                                # centerPos radius rings slices color                               # Draw sphere wires
drawCylinder                     ‚áê                         "DrawCylinder"                     _R‚ü®v3‚ãÑf‚ãÑf‚ãÑf‚ãÑi‚ãÑcolor‚ü©                              # position radiusTop radiusBottom height slices color               # Draw a cylinder/cone
drawCylinderEx                   ‚áê                         "DrawCylinderEx"                   _R‚ü®v3‚ãÑv3‚ãÑf‚ãÑf‚ãÑi‚ãÑcolor‚ü©                             # startPos endPos startRadius endRadius sides color                 # Draw a cylinder with base at startPos and top at endPos
drawCylinderWires                ‚áê                         "DrawCylinderWires"                _R‚ü®v3‚ãÑf‚ãÑf‚ãÑf‚ãÑi‚ãÑcolor‚ü©                              # position radiusTop radiusBottom height slices color               # Draw a cylinder/cone wires
drawCylinderWiresEx              ‚áê                         "DrawCylinderWiresEx"              _R‚ü®v3‚ãÑv3‚ãÑf‚ãÑf‚ãÑi‚ãÑcolor‚ü©                             # startPos endPos startRadius endRadius sides color                 # Draw a cylinder wires with base at startPos and top at endPos
drawCapsule                      ‚áê                         "DrawCapsule"                      _R‚ü®v3‚ãÑv3‚ãÑf‚ãÑi‚ãÑi‚ãÑcolor‚ü©                             # startPos endPos radius slices rings color                         # Draw a capsule with the center of its sphere caps at startPos and endPos
drawCapsuleWires                 ‚áê                         "DrawCapsuleWires"                 _R‚ü®v3‚ãÑv3‚ãÑf‚ãÑi‚ãÑi‚ãÑcolor‚ü©                             # startPos endPos radius slices rings color                         # Draw capsule wireframe with the center of its sphere caps at startPos and endPos
drawPlane                        ‚áê                         "DrawPlane"                        _R‚ü®v3‚ãÑv2‚ãÑcolor‚ü©                                   # centerPos size color                                              # Draw a plane XZ
drawRay                          ‚áê                         "DrawRay"                          _R‚ü®ray‚ãÑcolor‚ü©                                     # ray color                                                         # Draw a ray line
drawGrid                         ‚áê                         "DrawGrid"                         _R‚ü®i‚ãÑf‚ü©                                           # slices spacing                                                    # Draw a grid (centered at (0, 0, 0))
loadModel                        ‚áê model                   "LoadModel"                        _R‚ü®str‚ü©                                           # fileName                                                          # Load model from files (meshes and materials)
loadModelFromMesh                ‚áê model                   "LoadModelFromMesh"                _R‚ü®mesh‚ü©                                          # mesh                                                              # Load model from generated mesh (default material)
isModelReady                     ‚áê bool                    "IsModelReady"                     _R‚ü®model‚ü©                                         # model                                                             # Check if a model is ready
unloadModel                      ‚áê                         "UnloadModel"                      _R‚ü®model‚ü©                                         # model                                                             # Unload model (including meshes) from memory (RAM and/or VRAM)
getModelBoundingBox              ‚áê boundingBox             "GetModelBoundingBox"              _R‚ü®model‚ü©                                         # model                                                             # Compute model bounding box limits (considers all meshes)
drawModel                        ‚áê                         "DrawModel"                        _R‚ü®model‚ãÑv3‚ãÑf‚ãÑcolor‚ü©                              # model position scale tint                                         # Draw a model (with texture if set)
drawModelEx                      ‚áê                         "DrawModelEx"                      _R‚ü®model‚ãÑv3‚ãÑv3‚ãÑf‚ãÑv3‚ãÑcolor‚ü©                        # model position rotationAxis rotationAngle scale tint              # Draw a model with extended parameters
drawModelWires                   ‚áê                         "DrawModelWires"                   _R‚ü®model‚ãÑv3‚ãÑf‚ãÑcolor‚ü©                              # model position scale tint                                         # Draw a model wires (with texture if set)
drawModelWiresEx                 ‚áê                         "DrawModelWiresEx"                 _R‚ü®model‚ãÑv3‚ãÑv3‚ãÑf‚ãÑv3‚ãÑcolor‚ü©                        # model position rotationAxis rotationAngle scale tint              # Draw a model wires (with texture if set) with extended parameters
drawBoundingBox                  ‚áê                         "DrawBoundingBox"                  _R‚ü®boundingBox‚ãÑcolor‚ü©                             # box color                                                         # Draw bounding box (wires)
drawBillboard                    ‚áê                         "DrawBillboard"                    _R‚ü®camera‚ãÑtexture2D‚ãÑv3‚ãÑf‚ãÑcolor‚ü©                   # camera texture position size tint                                 # Draw a billboard texture
drawBillboardRec                 ‚áê                         "DrawBillboardRec"                 _R‚ü®camera‚ãÑtexture2D‚ãÑrectangle‚ãÑv3‚ãÑv2‚ãÑcolor‚ü©        # camera texture source position size tint                          # Draw a billboard texture defined by source
drawBillboardPro                 ‚áê                         "DrawBillboardPro"                 _R‚ü®camera‚ãÑtexture2D‚ãÑrectangle‚ãÑv3‚ãÑv3‚ãÑv2‚ãÑv2‚ãÑf‚ãÑcolor‚ü©# camera texture source position up size origin rotation tint       # Draw a billboard texture defined by source and rotation
uploadMesh                       ‚áê                         "UploadMesh"                       _R‚ü®"*"‚àæmesh‚ãÑbool‚ü©                                 # mesh dynamic                                                      # Upload mesh vertex data in GPU and provide VAO/VBO ids
uploadMeshRef                    ‚áê                         "UploadMesh"                       _R‚ü®"&"‚àæmesh‚ãÑbool‚ü©                                 # mesh dynamic                                                      # Upload mesh vertex data in GPU and provide VAO/VBO ids
updateMeshBuffer                 ‚áê                         "UpdateMeshBuffer"                 _R‚ü®mesh‚ãÑi‚ãÑptr‚ãÑi‚ãÑi‚ü©                                # mesh index data dataSize offset                                   # Update mesh vertex data in GPU for a specific buffer index
updateMeshBufferRaw              ‚áê                         "UpdateMeshBuffer"                 _R‚ü®mesh‚ãÑi‚ãÑ"*i8"‚ãÑi‚ãÑi‚ü©                              # mesh index data dataSize offset                                   # Update mesh vertex data in GPU for a specific buffer index
unloadMesh                       ‚áê                         "UnloadMesh"                       _R‚ü®mesh‚ü©                                          # mesh                                                              # Unload mesh data from CPU and GPU
drawMesh                         ‚áê                         "DrawMesh"                         _R‚ü®mesh‚ãÑmaterial‚ãÑmatrix‚ü©                          # mesh material transform                                           # Draw a 3d mesh with material and transform
drawMeshInstanced                ‚áê                         "DrawMeshInstanced"                _R‚ü®mesh‚ãÑmaterial‚ãÑ"*"‚àæmatrix‚ãÑi‚ü©                    # mesh material transforms instances                                # Draw multiple mesh instances with material and different transforms
exportMesh                       ‚áê bool                    "ExportMesh"                       _R‚ü®mesh‚ãÑstr‚ü©                                      # mesh fileName                                                     # Export mesh data to file, returns true on success
getMeshBoundingBox               ‚áê boundingBox             "GetMeshBoundingBox"               _R‚ü®mesh‚ü©                                          # mesh                                                              # Compute mesh bounding box limits
genMeshTangents                  ‚áê                         "GenMeshTangents"                  _R‚ü®"*"‚àæmesh‚ü©                                      # mesh                                                              # Compute mesh tangents
genMeshTangentsRef               ‚áê                         "GenMeshTangents"                  _R‚ü®"&"‚àæmesh‚ü©                                      # mesh                                                              # Compute mesh tangents
genMeshPoly                      ‚áê mesh                    "GenMeshPoly"                      _R‚ü®i‚ãÑf‚ü©                                           # sides radius                                                      # Generate polygonal mesh
genMeshPlane                     ‚áê mesh                    "GenMeshPlane"                     _R‚ü®f‚ãÑf‚ãÑi‚ãÑi‚ü©                                       # width length resX resZ                                            # Generate plane mesh (with subdivisions)
genMeshCube                      ‚áê mesh                    "GenMeshCube"                      _R‚ü®f‚ãÑf‚ãÑf‚ü©                                         # width height length                                               # Generate cuboid mesh
genMeshSphere                    ‚áê mesh                    "GenMeshSphere"                    _R‚ü®f‚ãÑi‚ãÑi‚ü©                                         # radius rings slices                                               # Generate sphere mesh (standard sphere)
genMeshHemiSphere                ‚áê mesh                    "GenMeshHemiSphere"                _R‚ü®f‚ãÑi‚ãÑi‚ü©                                         # radius rings slices                                               # Generate half-sphere mesh (no bottom cap)
genMeshCylinder                  ‚áê mesh                    "GenMeshCylinder"                  _R‚ü®f‚ãÑf‚ãÑi‚ü©                                         # radius height slices                                              # Generate cylinder mesh
genMeshCone                      ‚áê mesh                    "GenMeshCone"                      _R‚ü®f‚ãÑf‚ãÑi‚ü©                                         # radius height slices                                              # Generate cone/pyramid mesh
genMeshTorus                     ‚áê mesh                    "GenMeshTorus"                     _R‚ü®f‚ãÑf‚ãÑi‚ãÑi‚ü©                                       # radius size radSeg sides                                          # Generate torus mesh
genMeshKnot                      ‚áê mesh                    "GenMeshKnot"                      _R‚ü®f‚ãÑf‚ãÑi‚ãÑi‚ü©                                       # radius size radSeg sides                                          # Generate trefoil knot mesh
genMeshHeightmap                 ‚áê mesh                    "GenMeshHeightmap"                 _R‚ü®image‚ãÑv3‚ü©                                      # heightmap size                                                    # Generate heightmap mesh from image data
genMeshCubicmap                  ‚áê mesh                    "GenMeshCubicmap"                  _R‚ü®image‚ãÑv3‚ü©                                      # cubicmap cubeSize                                                 # Generate cubes-based map mesh from image data
loadMaterials                    ‚áê (ptr‚ä£"*"‚àæmaterial)      "LoadMaterials"                    _R‚ü®str‚ãÑ"*"‚àæi‚ü©                                     # fileName materialCount                                            # Load materials from model file
loadMaterialsRef                 ‚áê (ptr‚ä£"*"‚àæmaterial)      "LoadMaterials"                    _R‚ü®str‚ãÑ"&"‚àæi‚ü©                                     # fileName materialCount                                            # Load materials from model file
loadMaterialDefault              ‚áê material                "LoadMaterialDefault"              _R‚ü®‚ü©                                              #                                                                   # Load default material (Supports: DIFFUSE, SPECULAR, NORMAL maps)
isMaterialReady                  ‚áê bool                    "IsMaterialReady"                  _R‚ü®material‚ü©                                      # material                                                          # Check if a material is ready
unloadMaterial                   ‚áê                         "UnloadMaterial"                   _R‚ü®material‚ü©                                      # material                                                          # Unload material from GPU memory (VRAM)
setMaterialTexture               ‚áê                         "SetMaterialTexture"               _R‚ü®"*"‚àæmaterial‚ãÑi‚ãÑtexture2D‚ü©                      # material mapType texture                                          # Set texture for a material map type (MATERIAL_MAP_DIFFUSE, MATERIAL_MAP_SPECULAR...)
setMaterialTextureRef            ‚áê                         "SetMaterialTexture"               _R‚ü®"&"‚àæmaterial‚ãÑi‚ãÑtexture2D‚ü©                      # material mapType texture                                          # Set texture for a material map type (MATERIAL_MAP_DIFFUSE, MATERIAL_MAP_SPECULAR...)
setModelMeshMaterial             ‚áê                         "SetModelMeshMaterial"             _R‚ü®"*"‚àæmodel‚ãÑi‚ãÑi‚ü©                                 # model meshId materialId                                           # Set material for a mesh
setModelMeshMaterialRef          ‚áê                         "SetModelMeshMaterial"             _R‚ü®"&"‚àæmodel‚ãÑi‚ãÑi‚ü©                                 # model meshId materialId                                           # Set material for a mesh
loadModelAnimations              ‚áê (ptr‚ä£"*"‚àæmodelAnimation)"LoadModelAnimations"              _R‚ü®str‚ãÑ"*"‚àæi‚ü©                                     # fileName animCount                                                # Load model animations from file
loadModelAnimationsRef           ‚áê (ptr‚ä£"*"‚àæmodelAnimation)"LoadModelAnimations"              _R‚ü®str‚ãÑ"&"‚àæi‚ü©                                     # fileName animCount                                                # Load model animations from file
updateModelAnimation             ‚áê                         "UpdateModelAnimation"             _R‚ü®model‚ãÑmodelAnimation‚ãÑi‚ü©                        # model anim frame                                                  # Update model animation pose
unloadModelAnimation             ‚áê                         "UnloadModelAnimation"             _R‚ü®modelAnimation‚ü©                                # anim                                                              # Unload animation data
unloadModelAnimations            ‚áê                         "UnloadModelAnimations"            _R‚ü®"*"‚àæmodelAnimation‚ãÑi‚ü©                          # animations animCount                                              # Unload animation array data
unloadModelAnimationsRef         ‚áê                         "UnloadModelAnimations"            _R‚ü®"&"‚àæmodelAnimation‚ãÑi‚ü©                          # animations animCount                                              # Unload animation array data
isModelAnimationValid            ‚áê bool                    "IsModelAnimationValid"            _R‚ü®model‚ãÑmodelAnimation‚ü©                          # model anim                                                        # Check model animation skeleton match
checkCollisionSpheres            ‚áê bool                    "CheckCollisionSpheres"            _R‚ü®v3‚ãÑf‚ãÑv3‚ãÑf‚ü©                                     # center1 radius1 center2 radius2                                   # Check collision between two spheres
checkCollisionBoxes              ‚áê bool                    "CheckCollisionBoxes"              _R‚ü®boundingBox‚ãÑboundingBox‚ü©                       # box1 box2                                                         # Check collision between two bounding boxes
checkCollisionBoxSphere          ‚áê bool                    "CheckCollisionBoxSphere"          _R‚ü®boundingBox‚ãÑv3‚ãÑf‚ü©                              # box center radius                                                 # Check collision between box and sphere
getRayCollisionSphere            ‚áê rayCollision            "GetRayCollisionSphere"            _R‚ü®ray‚ãÑv3‚ãÑf‚ü©                                      # ray center radius                                                 # Get collision info between ray and sphere
getRayCollisionBox               ‚áê rayCollision            "GetRayCollisionBox"               _R‚ü®ray‚ãÑboundingBox‚ü©                               # ray box                                                           # Get collision info between ray and box
getRayCollisionMesh              ‚áê rayCollision            "GetRayCollisionMesh"              _R‚ü®ray‚ãÑmesh‚ãÑmatrix‚ü©                               # ray mesh transform                                                # Get collision info between ray and mesh
getRayCollisionTriangle          ‚áê rayCollision            "GetRayCollisionTriangle"          _R‚ü®ray‚ãÑv3‚ãÑv3‚ãÑv3‚ü©                                  # ray p1 p2 p3                                                      # Get collision info between ray and triangle
getRayCollisionQuad              ‚áê rayCollision            "GetRayCollisionQuad"              _R‚ü®ray‚ãÑv3‚ãÑv3‚ãÑv3‚ãÑv3‚ü©                               # ray p1 p2 p3 p4                                                   # Get collision info between ray and quad
initAudioDevice                  ‚áê                         "InitAudioDevice"                  _R‚ü®‚ü©                                              #                                                                   # Initialize audio device and context
closeAudioDevice                 ‚áê                         "CloseAudioDevice"                 _R‚ü®‚ü©                                              #                                                                   # Close the audio device and context
isAudioDeviceReady               ‚áê bool                    "IsAudioDeviceReady"               _R‚ü®‚ü©                                              #                                                                   # Check if audio device has been initialized successfully
setMasterVolume                  ‚áê                         "SetMasterVolume"                  _R‚ü®f‚ü©                                             # volume                                                            # Set master volume (listener)
getMasterVolume                  ‚áê f                       "GetMasterVolume"                  _R‚ü®‚ü©                                              #                                                                   # Get master volume (listener)
loadWave                         ‚áê wave                    "LoadWave"                         _R‚ü®str‚ü©                                           # fileName                                                          # Load wave data from file
loadWaveFromMemory               ‚áê wave                    "LoadWaveFromMemory"               _R‚ü®str‚ãÑustr‚ãÑi‚ü©                                    # fileType fileData dataSize                                        # Load wave from memory buffer, fileType refers to extension: i.e. '.wav'
isWaveReady                      ‚áê bool                    "IsWaveReady"                      _R‚ü®wave‚ü©                                          # wave                                                              # Checks if wave data is ready
loadSound                        ‚áê sound                   "LoadSound"                        _R‚ü®str‚ü©                                           # fileName                                                          # Load sound from file
loadSoundFromWave                ‚áê sound                   "LoadSoundFromWave"                _R‚ü®wave‚ü©                                          # wave                                                              # Load sound from wave data
loadSoundAlias                   ‚áê sound                   "LoadSoundAlias"                   _R‚ü®sound‚ü©                                         # source                                                            # Create a new sound that shares the same sample data as the source sound, does not own the sound data
isSoundReady                     ‚áê bool                    "IsSoundReady"                     _R‚ü®sound‚ü©                                         # sound                                                             # Checks if a sound is ready
updateSound                      ‚áê                         "UpdateSound"                      _R‚ü®sound‚ãÑptr‚ãÑi‚ü©                                   # sound data sampleCount                                            # Update sound buffer with new data
updateSoundRaw                   ‚áê                         "UpdateSound"                      _R‚ü®sound‚ãÑ"*i8"‚ãÑi‚ü©                                 # sound data sampleCount                                            # Update sound buffer with new data
unloadWave                       ‚áê                         "UnloadWave"                       _R‚ü®wave‚ü©                                          # wave                                                              # Unload wave data
unloadSound                      ‚áê                         "UnloadSound"                      _R‚ü®sound‚ü©                                         # sound                                                             # Unload sound
unloadSoundAlias                 ‚áê                         "UnloadSoundAlias"                 _R‚ü®sound‚ü©                                         # alias                                                             # Unload a sound alias (does not deallocate sample data)
exportWave                       ‚áê bool                    "ExportWave"                       _R‚ü®wave‚ãÑstr‚ü©                                      # wave fileName                                                     # Export wave data to file, returns true on success
exportWaveAsCode                 ‚áê bool                    "ExportWaveAsCode"                 _R‚ü®wave‚ãÑstr‚ü©                                      # wave fileName                                                     # Export wave sample data to code (.h), returns true on success
playSound                        ‚áê                         "PlaySound"                        _R‚ü®sound‚ü©                                         # sound                                                             # Play a sound
stopSound                        ‚áê                         "StopSound"                        _R‚ü®sound‚ü©                                         # sound                                                             # Stop playing a sound
pauseSound                       ‚áê                         "PauseSound"                       _R‚ü®sound‚ü©                                         # sound                                                             # Pause a sound
resumeSound                      ‚áê                         "ResumeSound"                      _R‚ü®sound‚ü©                                         # sound                                                             # Resume a paused sound
isSoundPlaying                   ‚áê bool                    "IsSoundPlaying"                   _R‚ü®sound‚ü©                                         # sound                                                             # Check if a sound is currently playing
setSoundVolume                   ‚áê                         "SetSoundVolume"                   _R‚ü®sound‚ãÑf‚ü©                                       # sound volume                                                      # Set volume for a sound (1.0 is max level)
setSoundPitch                    ‚áê                         "SetSoundPitch"                    _R‚ü®sound‚ãÑf‚ü©                                       # sound pitch                                                       # Set pitch for a sound (1.0 is base level)
setSoundPan                      ‚áê                         "SetSoundPan"                      _R‚ü®sound‚ãÑf‚ü©                                       # sound pan                                                         # Set pan for a sound (0.5 is center)
waveCopy                         ‚áê wave                    "WaveCopy"                         _R‚ü®wave‚ü©                                          # wave                                                              # Copy a wave to a new wave
waveCrop                         ‚áê                         "WaveCrop"                         _R‚ü®"*"‚àæwave‚ãÑi‚ãÑi‚ü©                                  # wave initSample finalSample                                       # Crop a wave to defined samples range
waveCropRef                      ‚áê                         "WaveCrop"                         _R‚ü®"&"‚àæwave‚ãÑi‚ãÑi‚ü©                                  # wave initSample finalSample                                       # Crop a wave to defined samples range
waveFormat                       ‚áê                         "WaveFormat"                       _R‚ü®"*"‚àæwave‚ãÑi‚ãÑi‚ãÑi‚ü©                                # wave sampleRate sampleSize channels                               # Convert wave data to desired format
waveFormatRef                    ‚áê                         "WaveFormat"                       _R‚ü®"&"‚àæwave‚ãÑi‚ãÑi‚ãÑi‚ü©                                # wave sampleRate sampleSize channels                               # Convert wave data to desired format
loadWaveSamples                  ‚áê (ptr‚ä£"*"‚àæf)             "LoadWaveSamples"                  _R‚ü®wave‚ü©                                          # wave                                                              # Load samples data from wave as a 32bit float data array
unloadWaveSamples                ‚áê                         "UnloadWaveSamples"                _R‚ü®"*"‚àæf‚ü©                                         # samples                                                           # Unload samples data loaded with LoadWaveSamples()
unloadWaveSamplesRef             ‚áê                         "UnloadWaveSamples"                _R‚ü®"&"‚àæf‚ü©                                         # samples                                                           # Unload samples data loaded with LoadWaveSamples()
loadMusicStream                  ‚áê music                   "LoadMusicStream"                  _R‚ü®str‚ü©                                           # fileName                                                          # Load music stream from file
loadMusicStreamFromMemory        ‚áê music                   "LoadMusicStreamFromMemory"        _R‚ü®str‚ãÑustr‚ãÑi‚ü©                                    # fileType data dataSize                                            # Load music stream from data
isMusicReady                     ‚áê bool                    "IsMusicReady"                     _R‚ü®music‚ü©                                         # music                                                             # Checks if a music stream is ready
unloadMusicStream                ‚áê                         "UnloadMusicStream"                _R‚ü®music‚ü©                                         # music                                                             # Unload music stream
playMusicStream                  ‚áê                         "PlayMusicStream"                  _R‚ü®music‚ü©                                         # music                                                             # Start music playing
isMusicStreamPlaying             ‚áê bool                    "IsMusicStreamPlaying"             _R‚ü®music‚ü©                                         # music                                                             # Check if music is playing
updateMusicStream                ‚áê                         "UpdateMusicStream"                _R‚ü®music‚ü©                                         # music                                                             # Updates buffers for music streaming
stopMusicStream                  ‚áê                         "StopMusicStream"                  _R‚ü®music‚ü©                                         # music                                                             # Stop music playing
pauseMusicStream                 ‚áê                         "PauseMusicStream"                 _R‚ü®music‚ü©                                         # music                                                             # Pause music playing
resumeMusicStream                ‚áê                         "ResumeMusicStream"                _R‚ü®music‚ü©                                         # music                                                             # Resume playing paused music
seekMusicStream                  ‚áê                         "SeekMusicStream"                  _R‚ü®music‚ãÑf‚ü©                                       # music position                                                    # Seek music to a position (in seconds)
setMusicVolume                   ‚áê                         "SetMusicVolume"                   _R‚ü®music‚ãÑf‚ü©                                       # music volume                                                      # Set volume for music (1.0 is max level)
setMusicPitch                    ‚áê                         "SetMusicPitch"                    _R‚ü®music‚ãÑf‚ü©                                       # music pitch                                                       # Set pitch for a music (1.0 is base level)
setMusicPan                      ‚áê                         "SetMusicPan"                      _R‚ü®music‚ãÑf‚ü©                                       # music pan                                                         # Set pan for a music (0.5 is center)
getMusicTimeLength               ‚áê f                       "GetMusicTimeLength"               _R‚ü®music‚ü©                                         # music                                                             # Get music time length (in seconds)
getMusicTimePlayed               ‚áê f                       "GetMusicTimePlayed"               _R‚ü®music‚ü©                                         # music                                                             # Get current music time played (in seconds)
loadAudioStream                  ‚áê audioStream             "LoadAudioStream"                  _R‚ü®u‚ãÑu‚ãÑu‚ü©                                         # sampleRate sampleSize channels                                    # Load audio stream (to stream raw audio pcm data)
isAudioStreamReady               ‚áê bool                    "IsAudioStreamReady"               _R‚ü®audioStream‚ü©                                   # stream                                                            # Checks if an audio stream is ready
unloadAudioStream                ‚áê                         "UnloadAudioStream"                _R‚ü®audioStream‚ü©                                   # stream                                                            # Unload audio stream and free memory
updateAudioStream                ‚áê                         "UpdateAudioStream"                _R‚ü®audioStream‚ãÑptr‚ãÑi‚ü©                             # stream data frameCount                                            # Update audio stream buffers with data
updateAudioStreamRaw             ‚áê                         "UpdateAudioStream"                _R‚ü®audioStream‚ãÑ"*i8"‚ãÑi‚ü©                           # stream data frameCount                                            # Update audio stream buffers with data
isAudioStreamProcessed           ‚áê bool                    "IsAudioStreamProcessed"           _R‚ü®audioStream‚ü©                                   # stream                                                            # Check if any audio stream buffers requires refill
playAudioStream                  ‚áê                         "PlayAudioStream"                  _R‚ü®audioStream‚ü©                                   # stream                                                            # Play audio stream
pauseAudioStream                 ‚áê                         "PauseAudioStream"                 _R‚ü®audioStream‚ü©                                   # stream                                                            # Pause audio stream
resumeAudioStream                ‚áê                         "ResumeAudioStream"                _R‚ü®audioStream‚ü©                                   # stream                                                            # Resume audio stream
isAudioStreamPlaying             ‚áê bool                    "IsAudioStreamPlaying"             _R‚ü®audioStream‚ü©                                   # stream                                                            # Check if audio stream is playing
stopAudioStream                  ‚áê                         "StopAudioStream"                  _R‚ü®audioStream‚ü©                                   # stream                                                            # Stop audio stream
setAudioStreamVolume             ‚áê                         "SetAudioStreamVolume"             _R‚ü®audioStream‚ãÑf‚ü©                                 # stream volume                                                     # Set volume for audio stream (1.0 is max level)
setAudioStreamPitch              ‚áê                         "SetAudioStreamPitch"              _R‚ü®audioStream‚ãÑf‚ü©                                 # stream pitch                                                      # Set pitch for audio stream (1.0 is base level)
setAudioStreamPan                ‚áê                         "SetAudioStreamPan"                _R‚ü®audioStream‚ãÑf‚ü©                                 # stream pan                                                        # Set pan for audio stream (0.5 is centered)
setAudioStreamBufferSizeDefault  ‚áê                         "SetAudioStreamBufferSizeDefault"  _R‚ü®i‚ü©                                             # size                                                              # Default size for new audio streams
setAudioStreamCallback           ‚áê                         "SetAudioStreamCallback"           _R‚ü®audioStream‚ãÑptr‚ü©                               # stream callback                                                   # Audio thread callback to request new data
attachAudioStreamProcessor       ‚áê                         "AttachAudioStreamProcessor"       _R‚ü®audioStream‚ãÑptr‚ü©                               # stream processor                                                  # Attach audio stream processor to stream, receives the samples as <float>s
detachAudioStreamProcessor       ‚áê                         "DetachAudioStreamProcessor"       _R‚ü®audioStream‚ãÑptr‚ü©                               # stream processor                                                  # Detach audio stream processor from stream
attachAudioMixedProcessor        ‚áê                         "AttachAudioMixedProcessor"        _R‚ü®ptr‚ü©                                           # processor                                                         # Attach audio stream processor to the entire audio pipeline, receives the samples as <float>s
detachAudioMixedProcessor        ‚áê                         "DetachAudioMixedProcessor"        _R‚ü®ptr‚ü©                                           # processor                                                         # Detach audio stream processor from the entire audio pipeline